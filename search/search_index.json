{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u00a1Bienvenido! \ud83c\udf89","text":"<p>En este espacio encontrar\u00e1s una colecci\u00f3n de pr\u00e1cticas y recursos de la asignatura de despliegue de aplicaciones web. Aqu\u00ed ire publicando una serie de, ejercicios pr\u00e1cticos asignados por el profesor durante las clases.</p>"},{"location":"#que-encontraras-aqui","title":"\u00bfQu\u00e9 encontrar\u00e1s aqu\u00ed?","text":"<ul> <li>Pr\u00e1cticas Evaluables: Ejercicios para que puedas seguir el proceso de despliegue de manera estructurada.</li> <li>Recursos \u00fatiles: Documentaci\u00f3n y enlaces.</li> </ul>"},{"location":"#objetivo","title":"Objetivo","text":"<p>El prop\u00f3sito de este material es que, al finalizar el curso, pueda manejar con confianza el despliegue de aplicaciones web en distintos entornos, ya sea en servidores locales, plataformas en la nube o servicios de hosting especializados.</p>"},{"location":"Tema%202/","title":"SERVIDOR NGINX","text":""},{"location":"Tema%202/#1-instalacion-serevidor-web-nginx","title":"1. Instalaci\u00f3n serevidor web Nginx","text":"<p>Primero deberemos de actualizar los repositorios de nuestra m\u00e1quina debian.</p> <p>Esto se hace con el siguiente comando</p> <p><code>sudo apt update</code></p> <p>Y posteriormente tendremos que intalar nginx:</p> <p><code>sudo apt install nginx</code></p> <p>Para comprobar que la instalaci\u00f3n se ha hecho de forma correcta y el servidor est\u00e1 activo introduciremos el siguiente comando</p> <p></p> <p>Y si vemos que el estado del servidor es <code>runing</code> es que la instalaci\u00f3n se ha hecho de forma correcta.</p>"},{"location":"Tema%202/#2-creacion-de-las-carpetas-del-sitio-web","title":"2. Creacion de las carpetas del sitio web","text":"<p>Todos los archivos que se almacenen en nginx se almacenar\u00e1n en un sistema de carpetas. Todas estas se encontrar\u00e1n en /var/www/; para esto vamos a crear una carpeta para nuestra web aqu\u00ed.</p> <p><code>sudo mkdir -p /var/www/nombre_web/html</code></p> <p>El nombre del dominio lo puedes elegir y dentro de la carpeta html tendr\u00e1s que clonar el repositorio <code>https://github.com/cloudacademy/static-website-example</code> que ser\u00e1 una p\u00e1gina web de prueba para comprobar que funciona correctamente.</p> <p></p> <p>Adem\u00e1s tendremos que cambiar los permisos para que el servidor pueda acceder a dicha carpeta para mostrarla.</p> <p>Para cambiar el propietario:</p> <p><code>sudo chown -R www-data:www-data /var/www/nombre_web/html</code></p> <p>Y para cambiar los permisos:</p> <p><code>sudo chmod -R 755 /var/ww/nombre_web</code></p> <p>Si hemos hecho estos cambios al hacer <code>ls -la</code> deberia aparecer la carpeta con las siguientes propiedades:</p> <p></p> <p>Para comprobar que el servidor est\u00e1 funcionando introducimos en la m\u00e1quina anfitriona <code>http://IP-maq-virtual</code> Esto lo sabremos con el comando <code>ip a</code>.</p> <p>Deberiamos de ver algo asi:</p> <p></p>"},{"location":"Tema%202/#2-comprobaciones-de-servidor-web-nginx","title":"2. Comprobaciones de servidor web NGINX","text":"<p>Hay dos rutas importantes una es <code>sites-available</code>, que contiene las rutas de los archivos de configuraci\u00f3n de los hosts virtuales, decir todas las webs que alberga el servidor. La otra es <code>sites-enable</code> que contiene los archivos de los sitios habilitados. Dentro de esta se encuentra el archivo <code>default</code> la cual muestra la p\u00e1gina abierta anteriormente.</p> <p>Para que se muestre en contenido de nuestra web debemos modificar el archivo <code>/etc/nginx/sites-availables/nombre_web</code>. Con el comando:</p> <p><code>sudo nano /etc/nginx/sites-availables/vuestro_dominio</code></p> <p>E introducimos el siguiente bloque:</p> <p></p> <p>La ruta debe ser donde se encuentre el archivo index.html</p> <p>Y creamos un enlace simbolico entre este archivo y el de los sitios que estan habilitados:</p> <p><code>sudo ln -s /etc/nginx/sites-available/nombre_web /etc/nginx/sites-enable</code></p> <p>Y reiniciamos el servidor </p> <p><code>sudo systemctl restart nginx</code></p>"},{"location":"Tema%202/#3-comprobaciones","title":"3. Comprobaciones","text":"<p>Como no poseemos un servidor DNS en el archivo <code>/etc/hosts</code> a\u00f1adimos la l\u00ednea <code>192.168.X.X nombre_web</code>.</p>"},{"location":"Tema%202/#4-ftp","title":"4. FTP","text":""},{"location":"Tema%202/#como-transferir-archivos-desde-nuestra-maquina-localanfitrion-a-nuestra-maquina-virtual-debianservidor-remoto","title":"\u00bfComo transferir archivos desde nuestra m\u00e1quina local/anfitrion a nuestra m\u00e1quina virtual Debian/servidor remoto?","text":"<p>Principalmente hay dos m\u00e9todos para hacer esta trasferencia de datos y archivos el m\u00e1s f\u00e1cil que va a ser a trav\u00e9s de git y la otra es mediante el protocolo FTP.     El protocolo FTP no es seguro ya que la informaci\u00f3n no viaja de forma cifrada, pero en 2001 se introdujo el SFTP que la aplica una capa ssh al FTP.</p>"},{"location":"Tema%202/#configurar-servidor-sftp-debian","title":"Configurar servidor SFTP DEBIAN","text":"<p>Primero lo instalamos:</p> <p><code>sudo apt-get update</code> <code>sudo apt-get intall vsftpd</code></p> <p>Ahora en el home creamos una carpeta llamada <code>/home/nombre_usuario/ftp</code></p> <p>Configuramos vsftpd para que este sea el directorio al cual vstpd cambia despues de conectarse.</p> <p>Creamos los certificados para conectarnos:</p> <p></p> <p>En el siguiente archivo :</p> <p><code>sudo nano /etc/vsftpd.conf</code></p> <p>Borramos las siguientes l\u00edneas</p> <p><code>rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</code></p> <p><code>rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</code></p> <p><code>ssl_enable=NO</code></p> <p>Y a\u00f1adimos las siguientes</p> <p></p> <p>Por \u00faltimo usamos un cliente FTP como Filezilla para acceder a los archivos de nuestro servido nginx.</p> <p></p> <p>En el recuadro servidor introducimos la ip de la m\u00e1quina debian, el nomber de usuario de la m\u00e1quina la contrase\u00f1a y el puerto que usaremos el 21.</p>"},{"location":"Tema%202/#1-cuestion-1","title":"1. Cuestion 1","text":"<p>Al no enlazar <code>sites-available</code> y <code>sites-enabled</code> mi p\u00e1gina web no aparecer\u00e1 como activa o enabled</p>"},{"location":"Tema%202/#2-cuestion-2","title":"2. Cuestion 2","text":"<p>Que nignx no tendr\u00e1 permisos para poder mostrar los archivos que haya dentro.</p>"},{"location":"Tema%202/tarea2.2/","title":"Pr\u00e1ctica 2.2 \u2013 Autenticaci\u00f3n en Nginx","text":""},{"location":"Tema%202/tarea2.2/#introduccion","title":"Introducci\u00f3n","text":"<p>En una transacci\u00f3n HTTP, la autenticaci\u00f3n de acceso b\u00e1sica es un m\u00e9todo que permite a un navegador web u otro cliente proporcionar credenciales, como un nombre de usuario y una contrase\u00f1a, al solicitar una p\u00e1gina al servidor.</p> <p>Como su nombre lo indica, la autenticaci\u00f3n b\u00e1sica es el m\u00e9todo m\u00e1s simple disponible para aplicaciones web. Fue definida originalmente en la especificaci\u00f3n del protocolo HTTP y, aunque no es sofisticada, cumple su prop\u00f3sito.</p> <p>Sin embargo, este tipo de autenticaci\u00f3n presenta importantes vulnerabilidades de seguridad, lo que la hace poco recomendable en muchas situaciones. No requiere el uso de cookies, identificadores de sesi\u00f3n ni p\u00e1ginas de inicio de sesi\u00f3n.</p>"},{"location":"Tema%202/tarea2.2/#paquetes-necesarios","title":"Paquetes necesarios","text":"<p>Para esta pr\u00e1ctica vamos a necesitar openssl para la creaci\u00f3n de las claves.</p> <p>En caso de no tenerlo instalado est\u00e9 es el comando.</p> <p><code>sudo apt install openssl</code></p>"},{"location":"Tema%202/tarea2.2/#creacion-de-usuarios-y-constrasenas-para-el-acceso-web","title":"Creaci\u00f3n de usuarios y constrase\u00f1as para el acceso web","text":"<p>Para la creaci\u00f3n de usuarios y contrase\u00f1as necesitaremos crear un archivo oculto llamado \".htpasswd\" en el directorio de configuraci\u00f3n /etc/nginx donde guardaremos nuestros usuarios y contrase\u00f1as.</p> <p>Vamos a crear dos usuarios:</p> <p>Para esto nos conectaremos a nuestra m\u00e1quina a trav\u00e9s de una conexi\u00f3n ssh:</p> <p></p> <p>Para despu\u00e9s crear los usuarios con el comando <code>sudo sh -c \"echo -n 'vuestro_nombre:' &gt;&gt; /etc/nginx/.htpasswd\"</code>:</p> <p></p> <p>Y as\u00ed se crea la constrase\u00f1a:</p> <p></p>"},{"location":"Tema%202/tarea2.2/#configurando-el-servidor-nginx-para-usar-autenticacion-basica","title":"Configurando el servidor Nginx para usar autenticaci\u00f3n b\u00e1sica","text":"<p>Para configurar el servidor Nginx para usar autenticaci\u00f3n b\u00e1sica editaremos la configuraci\u00f3n del server block sobre el cual queremos aplicar la restricci\u00f3n de acceso:</p> <p>Para esto usaremos nano: <code>sudo nano /etc/nginx/sites-available/nombre_web</code></p> <p></p> <p>Lo primero ser\u00e1 decidir qu\u00e9 recursos estar\u00e1n protegidos. Nginx permite a\u00f1adir restricciones a nivel de servidor o en un location (directorio o archivo) espec\u00edfico. Para nuestro ejemplo inicial vamos a proteger la ra\u00edz, la p\u00e1gina principal de nuestro sitio.</p> <p>Utilizaremos la directiva auth_basic dentro del location y le pondremos el nombre a nuestro dominio que ser\u00e1 mostrado al usuario al solicitar las credenciales. Por \u00faltimo, configuramos Nginx para que utilice el fichero que previamente hemos creado con la directiva auth_basic_user_file : </p> <p><code>location / {     auth_basic  \"\u00c1rea restringida\";     auth_basic_user_file    /etc/nginx/.htpasswd;         try_files $uri $uri/ =404; }</code></p> <p>Deberiamos acabar con un archivo parecido a este:</p> <p></p> <p>Una vez terminada la configuraci\u00f3n deberemos reiniciar el servicio:</p> <p><code>sudo systemctl restart nginx.service</code></p>"},{"location":"Tema%202/tarea2.2/#probando-la-nueva-configuracion","title":"Probando la nueva configuraci\u00f3n","text":"<p>Para esto desde la m\u00e1quina f\u00edsica abriremos el navegador y bucamos <code>http://nombre-sitio-web</code>:</p> <p></p>"},{"location":"Tema%202/tarea2.2/#combinacion-de-la-autenticacion-basica-con-la-restriccion-de-acceso-por-ip","title":"Combinaci\u00f3n de la autenticaci\u00f3n b\u00e1sica con la restricci\u00f3n de acceso por IP","text":"<p>Ha dos formas de integrar autenticaci\u00f3n b\u00e1sica, ya sea por un usuario autenticado y tener IP v\u00e1lida o que el usuario estar bien autenticado o tener una ip v\u00e1lida.</p>"},{"location":"Tema%202/tarea2.2/#como-permitir-o-denegar-acceso-sobre-una-ip-concreta","title":"Como permitir o denegar acceso sobre una IP concreta.","text":"<p>Esto lo conseguiremos con las directivas <code>allow</code> y <code>deny</code>:</p> <p><code>location /api {     deny 192.168.1.2;     allow 192.168.1.1/24;     allow 127.0.0.1;     deny all; }</code></p> <p>El acceso se garantizar\u00e1 a la IP 192.168.1.1/24, excluyendo a la direcci\u00f3n 192.168.1.2.</p> <p>Hay que tener en cuenta que las directivas allow y deny se ir\u00e1n aplicando en el orden en el que aparecen el archivo.</p> <p>Aqu\u00ed aplican sobre la location /api (esto es solo un ejemplo de un hipot\u00e9tico directorio o archivo), pero podr\u00edan aplicar sobre cualquiera, incluida todo el sitio web, la location ra\u00edz /.</p> <p>La \u00faltima directiva deny all quiere decir que por defecto denegaremos el acceso a todo el mundo. Por eso hay que poner los allow y deny m\u00e1s espec\u00edficos justo antes de esta, porque al evaluarse en orden de aparici\u00f3n, si los pusi\u00e9ramos debajo se denegar\u00eda el acceso a todo el mundo, puesto que deny all ser\u00eda lo primero que se evaluar\u00eda.</p> <p>Combinar la restricci\u00f3n IP y la autenticaci\u00f3n HTTP con la directiva satisfy.</p> <p>Si establecemos el valor de la directiva a \u201call\u201d, el acceso se permite si el cliente satisface ambas condiciones (IP y usuario v\u00e1lido). Si lo establecemos a \u201cany\u201d, el acceso se permite si se satisface al menos una de las dos condiciones.</p> <p><code>location/api{     satisfy all;     deny 192.168.1.2;     allow 192.168.1.1/24;     allow 127.0.0.1;     deny all;     auth_basic  \"Administrator's Area';     auth_basic_usr_file conf/htpasswd; }</code></p>"},{"location":"Tema%202/tarea2.2/#tareas","title":"Tareas","text":""},{"location":"Tema%202/tarea2.2/#1-intenta-entrar-primero-con-un-usuario-erroneo-y-luego-con-otro-correcto-puedes-ver-todos-los-sucesos-y-registros-en-los-logs-accesslog-y-errorlog","title":"1.  Intenta entrar primero con un usuario err\u00f3neo y luego con otro correcto. Puedes ver       todos los sucesos y registros en los logs access.log y error.log","text":"<pre><code>Adjunta una captura de pantalla de los logs donde se vea que intentas entrar primero con un usuario inv\u00e1lido y con otro v\u00e1lido. Indica d\u00f3nde podemos ver los errores de usuario inv\u00e1lido o no encontrado, as\u00ed como donde podemos ver el n\u00famero de error que os aparec\u00eda antes\n</code></pre> <p>Vamos a intentar acceder con usuario que no existe como es 'Roberto' y luego vamos a comprobar el error en el log.</p> <p></p>"},{"location":"Tema%202/tarea2.2/#2-borra-las-dos-lineas-que-hacen-referencia-a-la-autenticacion-basica-en-el-location-del-directorio-raiz-tras-ello-anade-un-nuevo-location-debajo-con-la-autenticacion-basica-para-el-archivoseccion-contacthtml-unicamente","title":"2.  Borra las dos l\u00edneas que hacen referencia a la autenticaci\u00f3n b\u00e1sica en el location del directorio ra\u00edz. Tras ello, a\u00f1ade un nuevo location debajo con la autenticaci\u00f3n b\u00e1sica para el archivo/secci\u00f3n contact.html \u00fanicamente.","text":"<p>Para esto tendremos que borrar las dos lineas que hacer referencia a la autenticaci\u00f3n b\u00e1sica en el directorio raiz. Luego a\u00f1adiremos un nuevo location:</p> <p><code>location /contact.html {     auth_basic  \"\u00c1rea restringida\";     auth_basic_user_file    /etc/nginx/.htpasswd; }</code></p>"},{"location":"Tema%202/tarea2.2/#3-configura-nginx-para-que-no-deje-acceder-con-la-ip-de-la-maquina-anfitriona-al-directorio-raiz-de-una-de-tus-dos-webs-modifica-su-server-block-o-archivo-de-configuracion-comprueba-como-se-deniega-el-acceso","title":"3. Configura Nginx para que no deje acceder con la IP de la m\u00e1quina anfitriona al directorio ra\u00edz de una de tus dos webs. Modifica su server block o archivo de configuraci\u00f3n. Comprueba como se deniega el acceso:","text":"<p>Para denegarle el acceso a nuestra m\u00e1quina anfitriona simplemente tendremos que a\u00f1adir la directiva deny como hemos visto antes con la ip de las misma en mi caso <code>192.168.164.110</code>, quedando as\u00ed:</p> <p><code>location / {     deny 192.168.164.110/24;     try_files $uri $uri/ =404; }</code></p> <p>Tras este cambio nos deberria aparecer esta p\u00e1gina en el navegador:</p> <p></p>"},{"location":"Tema%202/tarea2.2/#4-configura-nginx-para-que-desde-tu-maquina-anfitriona-se-tenga-que-tener-tanto-una-ip-valida-como-un-usuario-valido-ambas-cosas-a-la-vez-y-comprueba-que-si-puede-acceder-sin-problemas","title":"4. Configura Nginx para que desde tu m\u00e1quina anfitriona se tenga que tener tanto una IP v\u00e1lida como un usuario v\u00e1lido, ambas cosas a la vez, y comprueba que s\u00ed puede acceder sin problemas","text":"<p>Para conseguir esto tendremos que a\u00f1adir las direcctivas allow  deny  para que as\u00ed solo permita acceder a nuestra m\u00e1quina. Quedaria de la siguiente manera: <p><code>location / {     satisfy all;     allow 192.168.164.110/24;     deny all;     auth_basic  \"\u00c1rea restringida\";     auth_basic_user_file    /etc/nginx/.htpasswd;     try_files $uri $uri/ =404; }</code></p>"},{"location":"Tema%202/tarea2.2/#cuestiones-finales","title":"Cuestiones finales","text":"<ol> <li> <p>Cuestion 1:</p> </li> <li> <p>Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio web_muy_guay de mi sitio web, equivoc\u00e1ndome al poner el usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder?\u00bfPor qu\u00e9?</p> </li> </ol> <p><code>location /web_muy_guay {     #...     satisfy all;         deny  172.1.10.6;     allow 172.1.10.15;     allow 172.1.3.14;     deny  all;     auth_basic \"Cuesti\u00f3n final 1\";     auth_basic_user_file conf/htpasswd; }</code></p> <p>No podr\u00e1s acceder ya que a\u00fan habiendo una directiva que permite acceso a esa ip (<code>allow 172.1.10.15</code>), te has equivocado en la autenticaci\u00f3n y esto te deniega el acceso con la directiva (<code>satisfy all</code>).</p> <ol> <li>Cuestion 2:</li> </ol> <p>Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio web_muy_guay de mi sitio web, introduciendo correctamente usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder? \u00bfPor qu\u00e9?</p> <p><code>location /web_muy_guay {     #...     satisfy all;         deny  all;     deny  172.1.10.6;     allow 172.1.10.15;     allow 172.1.3.14;     auth_basic \"Cuesti\u00f3n final 2: The revenge\";     auth_basic_user_file conf/htpasswd; }</code></p> <p>No podr\u00e1s acceder ya que tu IP est\u00e1 denegado por una directiva.</p> <ol> <li>Cuestion 3:</li> </ol> <p>Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio web_muy_guay de mi sitio web, introduciendo correctamente usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder? \u00bfPor qu\u00e9?</p> <p><code>location /web_muy_guay {     #...     satisfy any;         deny  172.1.10.6;     deny 172.1.10.15;     allow 172.1.3.14;     auth_basic \"Cuesti\u00f3n final 3: The final combat\";     auth_basic_user_file conf/htpasswd; }</code></p> <p>Si prodr\u00e1s acceder ya que a pesar de que tu IP est\u00e1 denegada aparece la directiva <code>satify any</code> entonces cumplirias los requisitos.</p> <ol> <li>Cuestion 4:</li> </ol> <p>A lo mejor no sab\u00e9is que tengo una web para documentar todas mis excursiones espaciales con Jeff, es esta: Jeff Bezos y yo</p> <p>Supongamos que quiero restringir el acceso al directorio de proyectos porque es muy secreto, eso quiere decir a\u00f1adir autenticaci\u00f3n b\u00e1sica a la URL:Proyectos</p> <p>Completa la configuraci\u00f3n para conseguirlo:</p> <p><code>server { listen 80; listen [::]:80; root /var/www/freewebsitetemplates.com/preview/space-science; index index.html index.htm index.nginx-debian.html; server_name freewebsitetemplates.com www.freewebsitetemplates.com; location              {     try_files $uri $uri/ =404;     } }</code></p> <p>Para eso a\u00f1adiremos configuraremos un nuevo location para ello:</p> <p><code>server {     listen 80;     listen [::]:80;     root /var/www/freewebsitetemplates.com/preview/space-science;     index index.html index.htm index.nginx-debian.html;     server_name freewebsitetemplates.com www.freewebsitetemplates.com;     location  / {         try_files $uri $uri/ =404;         }     location /project.html {         satisfy all;         allow 192.168.164.110/24;         deny all;         auth_basic  \"\u00c1rea restringida\";         auth_basic_user_file    /etc/nginx/.htpasswd;         }     }</code></p>"},{"location":"Tema%202/tarea2.3/","title":"PROXY INVERSO CON NGINX","text":""},{"location":"Tema%202/tarea2.3/#1-que-es-un-servidor-proxy","title":"1. \u00bfQu\u00e9 es un servidor Proxy?","text":"<p>Un servidor Proxy es un intermediario entre el cliente y el servidor en ser un Proxy inverso, o un intermediario entre un servidor y el cliente siendo este un Proxy de reenv\u00edo.</p>"},{"location":"Tema%202/tarea2.3/#12-beneficios-de-un-servidor-proxy-inverso","title":"1.2. Beneficios de un servidor Proxy inverso","text":"<p>Un servidor Proxy nos va a aportar multitud de beneficios:</p> <ul> <li> <p>Con el podemos evitar restricciones de navegaci\u00f3n estatales o institucionales: Hay ciertas instituciones o estados que no les interesa que accedamos a ciertos sitios de la red, nosotros al usar un servidor proxy y salir a la red a trav\u00e9s de el podremos sortear dichas limitaciones.</p> </li> <li> <p>Bloquear acceso a ciertos sitios: De la misma forma dichas instituciones y estados usan dichos servidores para bloquear el acceso a distintos sitios, mediante filtros de contenido.</p> </li> <li> <p>Para proteger tu identidad en l\u00ednea: Al colocar un servidor Proxy entre tu y la red, no sales a esta misma directamente si no a trav\u00e9s del servidor; ya que al acceder a cualquier sitio web se har\u00e1 con la direcci\u00f3n IP del servidor.</p> </li> </ul>"},{"location":"Tema%202/tarea2.3/#13-beneficios-de-un-servidor-proxy-inverso","title":"1.3. Beneficios de un servidor Proxy inverso","text":"<p>Como hemos dicho este es el servidor que se encuentra antes del servidor que desea conectarse el cliente.</p> <ul> <li> <p>Balanceo de Carga: Si un sitio web recibe muchas peticiones este puede redireccionar peticiones y varios Proxys encargarse de entregar dichas peticiones.</p> </li> <li> <p>Protecci\u00f3n contra ataques: Al igual que anteriormente el servidor o servicio no se mostrar\u00e1 a la red con su direcci\u00f3n IP si no que lo har\u00e1 a trav\u00e9s de la direcci\u00f3n IP del servidor Proxy que lo precede, lo que dificultar\u00e1 un ataque directo al mismo.</p> </li> <li> <p>Almacenamiento en cach\u00e9: Si un recurso es muy usado no har\u00e1 que un cliente acceda directamente al servidor ya que el Proxy podr\u00e1 almacenar dicho recurso para poder aumentar el rendimiento.</p> </li> <li> <p>Cifrado SSL: El servidor Proxy tambi\u00e9n se puede configurar para el cifrado y descifrado de la informaci\u00f3n de cada cliente, esto ayuda a aliviar carga del servidor origen.</p> </li> </ul>"},{"location":"Tema%202/tarea2.3/#2-configuracion-del-servidor","title":"2. CONFIGURACI\u00d3N DEL SERVIDOR","text":"<p>Para poder hacer esto necesitaremos tener dos Servidores Debian, por eso necesitaremos clonar el servidor original; uno de estos se encargar\u00e1 de mostrar los recursos y el otro har\u00e1 las veces de Proxy.</p> <p>Ahora en vez de hacer las peticiones al servidor original haremos estas al servidor proxy el cual nos redigir\u00e1 al servidor.</p>"},{"location":"Tema%202/tarea2.3/#21-primero-necesitaremos-cambiar-el-nombre-de-la-web-por-el-de-webserver","title":"2.1. Primero necesitaremos cambiar el nombre de la web por el de webserver","text":"<p>Esto implica:</p> <ol> <li>Cambiar el nombre del archivo de configuraci\u00f3n de sitios disponibles para Nginx</li> </ol> <p></p> <pre><code>- Cambiar el nombre del sitio web dentro de este archivo de configuracion\n</code></pre> <p></p> <pre><code>- Y borrar el link simb\u00f3lico de la carpeta sites-enabled\n</code></pre> <p></p> <ol> <li> <p>En el archivo de configuraci\u00f3n del sitio web, en lugar de hacer que escuche al puerto 80 que escuche al 8080.</p> </li> <li> <p>Reiniciar Nginx.</p> </li> </ol>"},{"location":"Tema%202/tarea2.3/#nginx-proxy-inverso","title":"Nginx proxy inverso","text":"<p>Ahora cuando queramos acceder a <code>http://ejemplo-proxy</code>, nos reenviar\u00e1 a <code>http://webserver:8080</code> para esto tendermos que:</p> <ul> <li> <p>Crear un archivo de configuraci\u00f3n en <code>sites-available</code> con el nombre <code>practica2_alberto</code></p> </li> <li> <p>Este tendr\u00e1 la siguiente configuraci\u00f3n.</p> </li> </ul> <p></p> <ul> <li>Pondremos que escuche al puerto 80.</li> <li>El nombre que le hayamos puesto al servidor</li> <li>Y la directiva <code>prox_pass</code> ser\u00e1 el lugar al que nos redigir\u00e1 en el que habr\u00e1 que poner <code>http://IP_server:puerto</code>.</li> <li>Crear un enlace simbolico del archivo de configuraci\u00f3n <code>webserver-proxy</code> en <code>sites-enabled</code>. </li> </ul>"},{"location":"Tema%202/tarea2.3/#3-ccomprobaciones","title":"3. CCOMPROBACIONES","text":"<ul> <li>Comprobad adem\u00e1s la petici\u00f3n y respuesta con las herramientas de desarrollador de Firefox en Xubuntu. Pulsando F12 en el navegador os aparecer\u00e1n estas herramientas</li> </ul>"},{"location":"Tema%202/tarea2.3/#anadiendo-cabeceras","title":"A\u00d1ADIENDO CABECERAS","text":"<p>Para comprobar donde se conecta crearemos una cabecera con el nombre del Host, esto lo haremso a\u00f1adiendo <code>add_header Host nombre_del_host;</code> esto lo haremos dentro del archivo de configuraci\u00f3n en la parte <code>location / {...}</code>.</p> <ol> <li>A\u00f1adiremos primero la cabecera unicamente en el archivo de configruaci\u00f3n. Se deberia de quedar algo as\u00ed:</li> </ol> <p></p> <ol> <li>Reiniciamos Nginx.</li> <li>Comprobamos que podemos acceder sin problema.</li> </ol>"},{"location":"Tema%202/tarea2.4/","title":"BALANCEO DE CARGA CON PROXY INVERSO EN NGINX","text":""},{"location":"Tema%202/tarea2.4/#1-introduccion","title":"1. INTRODUCCION","text":"<p>Para entender esta pr\u00e1ctica primero debemos saber que es un proxy inverso y un balanceador de carga:</p>"},{"location":"Tema%202/tarea2.4/#11-proxy-inverso","title":"1.1 Proxy inverso","text":"<p>Un proxy inverso es un tipo de servidor que se encuentra entre el cliente y servidor y se encarga de recibir las peticiones y redireccionarlas al servidor web, para despues responder dicha solicitud.</p>"},{"location":"Tema%202/tarea2.4/#12-balanceador-de-carga","title":"1.2 Balanceador de carga","text":"<p>Un balanceador de carga, es un tipo de proxy inverso que adem\u00e1s se encarga de distribuir las peticiones entre servidores para que as\u00ed un solo servidor no se tenga que encargar de todas las solicitudees. Esto es necesario cuando un sitio necesita de varios servidores por la cantidad de peticiones que reciba o por la disposici\u00f3n geogr\u00e1fica del mismo; esta implementaci\u00f3n aporta un nivel mayor de seguridad ya que al haber dos servidores dando las mismas respuestas, si uno cae ya sea por un ataque o por cualquier otro problema tendremos el otro resolviendo las peticiones mientras este est\u00e9 caido. Y por \u00faltimo esto tambi\u00e9n mejora la experiencia del usuario ya que reduce la cantidad de errores percibidas por el usuario, detectando un servidor defectuoso y redireccionando las peticones a otro, y por otra parte reduciendo la velocidad de respuesta. </p>"},{"location":"Tema%202/tarea2.4/#2-tarea","title":"2. TAREA","text":"<p>Para esta pr\u00e1ctica vamos a necesitar el proxy inverso de la pr\u00e1ctica anteior, y replicar el servidor web que teniamos.</p> <ul> <li>Cada servidor web tendr\u00e1 un sitio web espec\u00edfico para esta practica.<ul> <li>El webserver2 tendr\u00e1 un IP asignada de forma fija mediante la configuraci\u00f3n DHCP.</li> </ul> </li> <li>Cambiaremos la configuraci\u00f3n del proxy inverso para que tambi\u00e9n haga el balanceo de carga.</li> <li>Haremos las peticiones HTTP desde el navegador WEB de nuestra m\u00e1quina anfitriona, accediendo a <code>http://balanceo</code>.</li> </ul>"},{"location":"Tema%202/tarea2.4/#3-configuraciones","title":"3. CONFIGURACIONES","text":"<p>Primero necesitamos desenlazar la carpeta con la web que teniamos previamente <code>/etc/nginx/sites-enabled</code> y ejecutar <code>unlink nombre-archivo</code>.</p>"},{"location":"Tema%202/tarea2.4/#nginx-servidor-web-1","title":"Nginx Servidor Web 1","text":"<p>El primer servidor web ser\u00e1 el servidor principal que hemos estado usando hasta ahora, donde tenemos instalado ya el servicio web.</p> <p>Debemos configurar este servidor web para que sirva el siguiente <code>index.html</code> que deb\u00e9is crear dentro de la carpeta <code>/var/www/webserver1/html</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Web Server 1&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;Esto es el webserver 1&lt;/header&gt;\n    &lt;p&gt;Prueba de balanceo de carga recargando esta p\u00e1gina&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>El nombre del sitio web que en los archivos correspondientes en sites-availables es webserver1. En donde escribiremos la siguiente configuraci\u00f3n.</p> <pre><code>server {\n    listen 8080;\n\n    server_name webserver1 www.webserver1;\n\n    root /var/www/webserver1/html;\n    index index.md index.htm;\n\n    location / {            \n            add_header Host servidor_web1_a23lupual;\n            try_files $uri $uri/ =404;\n    }\n}\n</code></pre> <p>Como veis el servidor escuchara el puerto 8080 y le a\u00f1adiremos la cabecera Host: servidor_web1_a23lupual.</p>"},{"location":"Tema%202/tarea2.4/#nginx-servidor-2","title":"Nginx Servidor 2","text":"<p>En este servidor web debemos realizar una configuraci\u00f3n id\u00e9ntica al servidor web 1, pero cambiando webserver1 por webserver2 (tambi\u00e9n en el index.html),  as\u00ed como el nombre de la cabecera a\u00f1adida, que ser\u00e1 Serv_Web2_vuestronombre</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Web Server 2&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;Esto es el webserver 2&lt;/header&gt;\n    &lt;p&gt;Prueba de balanceo de carga recargando esta p\u00e1gina&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Tema%202/tarea2.4/#config-nginx","title":"Config Nginx","text":"<pre><code>server {\n        listen 8080;\n\n        server_name webserver2 www.webserver2;\n\n        root /var/www/webserver2/html;\n        index index.md index.htm;\n\n        location / {\n                add_header Host servidor_web2_a23lupual;\n                try_files $uri $uri/ =404;\n        }\n}\n</code></pre> <p>Como pod\u00e9is observar la configuraci\u00f3n es cas\u00ed id\u00e9ntica, cambiando simplemente el nombre y la ruta.</p>"},{"location":"Tema%202/tarea2.4/#configuracion-del-proxy-inverso","title":"Configuraci\u00f3n del Proxy Inverso","text":"<p>Tras haber realizado las configuraciones anteriores, ya tendremos los 2 servidores web listos, entre los cuales vamos a distribuir las peticiones.</p> <p>Por tanto, deberemos configurar el servidor proxy para que haga uso de los servidores web y distribuya estas peticiones.</p> <ul> <li>Crearemos en sites-available el archivo de configuraci\u00f3n <code>balanceo</code></li> </ul> <p>El cual tendr\u00e1 el siguiente formato:</p> <pre><code>upstream backend_hosts {\n            random;\n            server ________:____;\n            server ________:____;\n}\n        server {\n            listen 80;\n            server_name ________;      \n            location / {\n                proxy_pass http://backend_hosts;\n            }\n        }\n</code></pre> <p>Donde: </p> <ul> <li>upstream backend_hosts: son los servidores en los que se reparte la carga.</li> <li>Colocaremos las ip de cada servidor, como su puerto.</li> <li>A este grupo le pondremos un nombre que es backend_hosts.</li> <li>El parametro random, es para que el balanceo sea aleatorio.</li> </ul> <p>Una vez configurado se ver\u00eda as\u00ed:</p> <pre><code>upstream backend_hosts {\n            random;\n            server 192.168.116.117:8080;\n            server 192.168.116.142:8080;\n}\n        server {\n            listen 80;\n            server_name practica2_alberto;\n            location / {\n                add_header Host servidor_web2_a23lupual;\n                proxy_pass http://backend_hosts;\n            }\n        }\n</code></pre>"},{"location":"Tema%202/tarea2.4/#comprobaciones","title":"Comprobaciones","text":""},{"location":"Tema%202/tarea2.4/#comprobacion-del-balanceo-de-carga","title":"Comprobaci\u00f3n del balanceo de carga","text":"<p>Si accedeis a vuestro sitio web, deb\u00e9is poder accediendo sin problemas:</p> <ul> <li>Recargar la p\u00e1gina varias veces y ver\u00e9is como se va alternando entre los dos servidores web.</li> </ul> <p>Como podemos ver el servidor proxy hace el valanceo y nos muestra las p\u00e1ginas:</p> <p></p> <p></p>"},{"location":"Tema%202/tarea2.4/#comprobacion-cuando-cae-un-servidor","title":"Comprobaci\u00f3n cuando cae un servidor","text":"<p>Nuestro balanceador de carga est\u00e1 constantemente monitorizando \u201cla salud\u201d de los servidores web. De esta forma, si uno deja de funcionar por cualquier  raz\u00f3n, siempre enviar\u00e1 las solicitudes a los que queden \u201cvivos\u201d. Vamos a comprobarlo:</p> <p>Para esto apagaremos el primer servidor con el comando <code>sudo poweroff</code></p> <p></p> <p>Y como podemos ver el servidor 2 sigue funcionando sin problemas.</p> <p></p>"},{"location":"Tema%202/tarea2.4/#cuestiones","title":"Cuestiones","text":""},{"location":"Tema%202/tarea2.4/#1-least-connections-least_conn","title":"1. Least connections (least_conn)","text":"<p>Este m\u00e9todo distribuye las peticiones a los servidores con menos carga, para as\u00ed mejorar la eficiencia del balanceo de carga.</p>"},{"location":"Tema%202/tarea2.4/#2-ip-hash-ip_hash","title":"2. IP Hash (ip_hash)","text":"<p>Este m\u00e9todo distribuye las peticiones a los servidores bas\u00e1ndose en la IP del cliente, de esta forma si un cliente accede a un servidor, siempre se le redirigir\u00e1 a ese servidor.</p>"},{"location":"Tema%202/tarea2.4/#3-least-time-menor-tiempo","title":"3. Least Time (Menor tiempo)","text":"<p>Este m\u00e9todo distribuye las peticiones a los servidores con menos tiempo de respuesta, de esta forma se mejora la eficiencia del balanceo de carga.</p> <ul> <li>Si quiero a\u00f1adir 2 servidores web m\u00e1s al balanceo de carga, describe detalladamente qu\u00e9 configuraci\u00f3n habr\u00eda que a\u00f1adir y d\u00f3nde.</li> </ul> <p>Para esto debemos ir al bloque de configuraci\u00f3n upstream backend_hosts y al igual que hicimos anteriormente a\u00f1adiremos dos l\u00edneas m\u00e1s de configuraci\u00f3n:</p> <pre><code>upstream backend_hosts {\n            random;\n            server 192.168.116.117:8080;\n            server 192.168.116.142:8080;\n\n            server nuevo_server1;\n            server nuevo_server2;\n}\n</code></pre>"},{"location":"Tema%202/tarea2.5/","title":"Practica 2.5 - Proxy inverso y balanceo de carga con SSL en NGINX","text":""},{"location":"Tema%202/tarea2.5/#introduccion","title":"Introducci\u00f3n","text":"<p>Teniendo en cuenta en el escenario en el que nos encontramos, ahora mismo los propios servidores web lo cual aumenta la carga que tienen que tienen que soportar, para esto vamos a trasladar el cifrado el servidor proxy, se puede pensar que la comunicaci\u00f3n entre el proxy y el servidor web puede ser insegura, pero esta comunicaci\u00f3n se lleva a cabo en una red privada, lo cual la protege de cualquier ataque.</p>"},{"location":"Tema%202/tarea2.5/#certificados","title":"Certificados","text":"<p>HTTPS se basa en el uso de certificados digitales, que resumiendo al entrar en una web se nos entrega un certificado mostrando quien es la p\u00e1gina. </p> <p>Para comprobar dichos certificados deberemos acceder a la Autoridad de Certificaci\u00f3n (CA). Los navegadores tienen precargadas las Autoridades de certificaci\u00f3n en las que conf\u00edan, por lo tanto si una web usa una diferentes a estas nos aparecer\u00e1 un error diciendo que esta p\u00e1gina no es segura.</p>"},{"location":"Tema%202/tarea2.5/#tarea","title":"Tarea","text":"<p>Partiendo de la configuraci\u00f3n exacta de la pr\u00e1ctica anterior, en donde ten\u00edamos el servidor proxy de balanceo de carga y los dos servidores web.</p> <p>Deberemos a\u00f1adir la configuraci\u00f3n SSL para el cifrado del proxy inverso, para cualquier solicitud distinta a los servidores web.</p>"},{"location":"Tema%202/tarea2.5/#cracion-del-certificado-autofirmado","title":"Craci\u00f3n del certificado autofirmado","text":"<p>Nosotros no usaremos certificados de ninguna CA de confianza, ya que:</p> <ul> <li>Nuestra p\u00e1gina no est\u00e1 publicada en internet.</li> <li>Y estos certificados son de pago.</li> </ul> <p>As\u00ed que, crearemos nuestro propio certificado y lo firmaremos nosotros mismo como si fu\u00e9semos una CA aut\u00e9ntica.</p> <p>Veamos, pues el proceso para generar los certificados y las claves asociadas a ellos (privada/p\u00fablica). En primer lugar, debemos crear el siguiente directorio: <code>/etc/nginx/ssl</code>.</p> <p>Podemos crear los certificados con el siguiente comando:</p> <p></p> <ul> <li><code>opnessl</code>: Es una herramienta por l\u00ednea de comandos, que permite administras certificados, clave y otros archivos OpenSSL.</li> <li><code>req</code>: Este subcomando se utiliza para generar una solicitud de certificados y tambi\u00e9n solicitudes de firma de certificados (CSR).</li> <li><code>x509</code>: Este subcomando se utiliza para firmar, cifrar, descifrar, verificar y mostrar certificados.</li> <li><code>nodes</code>: Esto le dice a Openssl que no cifre la clave privada.</li> <li><code>days 365</code>: Esto le dice a Openssl que el certificado expirar\u00e1 en 365 d\u00edas.</li> <li><code>newkey rsa:2048</code>: Esto le dice a Openssl que genere una nueva clave y certificado al mismo tiempo siendo, la clave RSA de 2048 bits.</li> <li><code>keyout</code>: Esto le dice a Openssl que el archivo de clave privada se llamar\u00e1 <code>server.key</code>.</li> <li><code>out</code>: Esto le dice a Openssl que el archivo de certificado se llamar\u00e1 <code>server.crt</code>.</li> </ul>"},{"location":"Tema%202/tarea2.5/#configuracion-ssl-del-servidor-proxy-inverso","title":"Configuraci\u00f3n SSL del servidor proxy inverso","text":"<p>De la pr\u00e1ctica anterior, dentro del directorio <code>/etc/nginx/sites-availabe</code> tenemos el archivo de configuraci\u00f3n \"balanceo\". Es aqu\u00ed donde realizaremos la configuraci\u00f3n para que el acceso al sitio web se realice mediante SSL(HTTPS)</p> <p>Es por esto dentro del bloque <code>server{...}</code> cambiaremos el puerto de escucha listen 80 por el siguiente bloque a continuaci\u00f3n.</p> <p></p> <p>Donde estamos diciendo que:</p> <ul> <li>Escuche en el puerto 443 (Puerto por defecto de HTTPS).</li> <li>El directorio donde est\u00e1 el certificado que hemos generado.</li> <li>El directorio donde est\u00e1 la clave que hemos generado anteriormente.</li> <li>Los protocolos y tipos de cifrados que se pueden utilizar -&gt; Estas son las versiones de protocolos y los tipos de cifrados considerados seguros a d\u00eda de hoy.</li> <li><code>server_name</code> Es el nombre del servidor.</li> <li>Y por \u00faltimo el archivo donde se guardan los logs de acceso.</li> </ul>"},{"location":"Tema%202/tarea2.5/#comprobaciones","title":"Comprobaciones","text":"<p>Para comprobar que los datos del certificado son correctos podemos comprobarlo as\u00ed.</p> <ol> <li> <p>Pulsamos en el candado de la barra de b\u00fasqueda    </p> </li> <li> <p>Le damos a m\u00e1s informaci\u00f3n    </p> </li> <li> <p>Y por \u00faltimo, ver certificado:    </p> </li> <li> <p>Access los</p> </li> <li> <p>HTTP_ACCESS.log </p> </li> <li> <p>HTTPS_ACCESS.log </p> </li> </ol>"},{"location":"Tema%202/tarea2.5/#cuestiones-finales","title":"Cuestiones finales","text":""},{"location":"Tema%202/tarea2.5/#cuestion-1","title":"Cuesti\u00f3n 1","text":"<p>-Hemos configurado nuestro proxy inverso con todo lo que nos hace falta pero no nos funciona y da un error del tipo This site can't provide a secure connection, ERR_SSL_PROTOCOL_ERROR. Dentro de nuestro server block tenemos esto:</p> <pre><code>server {\nlisten 443;\nssl_certificate /etc/nginx/ssl/enrico-berlinguer/server.crt;\nssl_certificate_key /etc/nginx/ssl/enrico-berlinguer/server.key;\nssl_protocols TLSv1.3;\nssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;\nserver_name enrico-berlinguer;\naccess_log /var/log/nginx/https_access.log;\n\nlocation / {\n    proxy_pass http://red-party;\n    }\n}\n</code></pre> <p>Porque en la l\u00ednea en la que pone <code>listen 443</code> no hemos a\u00f1adido el par\u00e1metro <code>ssl</code>. Por lo que deber\u00eda ser <code>listen 443 ssl</code>. Esto significa que ahora mismo no responde peticiones HTTPS.</p>"},{"location":"Tema%202/tarea2.5/#cuestion-2","title":"Cuesti\u00f3n 2","text":"<p>Imaginad que intentamos acceder a nuestro sitio web HTTPS y nos encontramos con el siguiente error:</p> <p></p> <p>Este error ocurre porque no estamos usando un certificado de una CA de confianza, por lo que el navegador nos muestra este error. Para solucionarlo deberemos a\u00f1adir una excepci\u00f3n en el navegador o a\u00f1adir una CA de confianza.</p>"},{"location":"Tema%202/tarea_ampliacion/","title":"Configuraci\u00f3n de un servidor Nginx con Hosts Virtuales y directorios de usuario","text":"<p>En esta pr\u00e1ctica vamos a vamos a crear varios hosts virtuales para alojar m\u00faltiple sitios web y que cada usuario de la m\u00e1quina Debian maodifique su sitio a trav\u00e9s de su carpeta personal, esto se consigue haciendo que cada host virtual apunte al directorio public_html.</p>"},{"location":"Tema%202/tarea_ampliacion/#instalacion-de-nginx","title":"Instalaci\u00f3n de Nginx","text":"<ul> <li>Tener un entorno Debian.</li> <li>Instalar Nginx.</li> <li>Usar SSH para manipular el servidor.</li> </ul>"},{"location":"Tema%202/tarea_ampliacion/#creacion-de-usuarios-del-sistema","title":"Creaci\u00f3n de usuarios del sistema:","text":"<ul> <li> <p>Creaci\u00f3n de usuarios.</p> <ul> <li>Crea dos usuarios (usuario1 y usuario2).  </li> </ul> <p><code>sudo adduser usuario1</code> <code>sudo adduser usuario2</code>.</p> <ul> <li>Asignaci\u00f3n de contrase\u00f1as</li> </ul> </li> </ul>"},{"location":"Tema%203/tarea3.1/","title":"PRACTICA 3.1.- INSTALACI\u00d3N DE TOMCAT Y MAVEN PARA DESPLIEGUE DE APLICACI\u00d3N JAVA","text":""},{"location":"Tema%203/tarea3.1/#1-introduccion","title":"1. INTRODUCCI\u00d3N","text":"<p>Para esta pr\u00e1ctica necesitaremos una m\u00e1quina virtual debian a poder ser con entorno gr\u00e1fico en mi caso  usar\u00e9 una m\u00e1quina Debian 12.</p> <p>Una vez tengamos esta instalada y corriendo nos dispondremos a instalar tomcat que usaremos la versi\u00f3n 10 de tomcat.</p>"},{"location":"Tema%203/tarea3.1/#2-instalacion","title":"2. INSTALACI\u00d3N","text":"<p>Para la instalaci\u00f3n de tomcat necesitaremos herramientas del sistema de los repositorios Debian y para esto actualizaremos los paquetes:</p> <ul> <li>Primero necesitaremos actualizar el sistema</li> </ul> <p></p> <ul> <li>Despues instalar los paquetes que vamos a necesitar</li> </ul> <p></p> <p>Continuamos con la instalaci\u00f3n de tomcat con el siguiente comando:</p> <p></p> <p>Tambi\u00e9n podemos instalar esto mismo desde la p\u00e1gina de tomcat instalaci\u00f3n tomcat.</p>"},{"location":"Tema%203/tarea3.1/#21-creacion-del-servicio-tomcat","title":"2.1 Creacion del servicio tomcat","text":"<p>Para que podamos usar tomcat como un servicio deberemos comenzar con la creaci\u00f3n de usuario la cual usar\u00e1 este.</p> <p></p> <p>Una vez que hemos creado este usuario debemos descomprimir lo que hemos instalado previamente en el directorio que le hemos asignado a tomcat en nuestro caso <code>/opt/tomcat</code>.</p> <p></p> <p>Cuando tenemos el paso anterior debemos darle a esta carpeta los permisos al usuarios que hemos creado para tomcat con la siguiente l\u00ednea.</p> <p></p> <p>Para facilitar la instalaci\u00f3n y mantenimiento podemos cambiar el nombre de estos paquetes con el siguiente comando <code>mv &lt;/direccion/nombre-antiguio&gt; &lt;/direccion/nombre-nuevo&gt;</code>.</p> <p>Creamos el archivo de unidad de Systemd:</p> <p></p> <p>Y en este mismo archivo escribiremos los siguiente:</p> <p></p> <p>Si lo hemos hecho todo bien iniciaremos el servicio <code>sudo systemctl start tomcat10</code></p> <p>Si nos vamos al navegador y buscamos lo siguiente <code>http://localhost:8080</code> nos deber\u00eda aparecer una p\u00e1gina como esta</p>"},{"location":"Tema%203/tarea3.1/#3-firewall","title":"3. FIREWALL","text":"<p>Si tenemos un firewall UFW en el sistema y queremos acceder desde la red tendremos que a\u00f1adir una regla al puerto 8080/TCP</p> <p><code>sudo ufw allow 8080/tcp</code></p>"},{"location":"Tema%203/tarea3.1/#4-configuracion-del-sistema-de-administracion-de-tomcat","title":"4. Configuraci\u00f3n del sistema de administraci\u00f3n de tomcat","text":"<p>Para esto comenzamos introduciendo el siguiente comando</p> <p></p> <p>Accedemos al archivo <code>/opt/tomcat/apache-tomcat/conf/tomcat-users.xml</code> y a\u00f1adimos las siguienes l\u00edneas</p> <p></p> <p>Para esta pr\u00e1ctica usaremos el usuario \"usuario\" y de contrase\u00f1a \"usuario\"</p> <p>Ahora buscaremos <code>http://localhost:8080/admin</code> y si lo hemos hecho bien nos pedir\u00e1 que nos autenticamos</p> <p></p> <p>Y veremos la p\u00e1gina de admin</p> <p></p> <p>Por \u00faltimo desplegaremos una aplicaci\u00f3n <code>.war</code> desde la p\u00e1gina <code>http://localhost:8080/manager</code> la desplegaremos desde aqu\u00ed</p> <p></p> <p>Aqu\u00ed eligiremos el archivo <code>.war</code> y una vez despleado podremos acceder como un archivo normal</p> <p></p>"},{"location":"Tema%203/tarea3.1/#5-despliege-con-maven","title":"5. Despliege con MAVEN","text":"<ol> <li> <p>Para hacer un despliegue con Maven primero actualizaremos los repositorios con <code>sudo apt update</code> e intalaremso wget <code>sudo apt install wget -y</code></p> </li> <li> <p>Instalamos Apache Maven </p> </li> </ol> <p></p> <p>Para poder usar maven con tomcat tenemos que asegurarnos que a\u00f1adimos todos los usuarios necesarios para que maven pueda hacer este despliege esto significa que maven tenga el permiso de <code>manager-script</code>; para esto a\u00f1adimos las siguientes l\u00edneas.</p> <pre><code>&lt;role rolename=\"admin\"/&gt;\n&lt;role rolename=\"admin-gui\"/&gt;\n&lt;role rolename=\"manager\"/&gt;\n&lt;role rolename=\"manager-gui\"/&gt;\n&lt;role rolename=\"manager-script\"/&gt;\n&lt;user username=\"admin\" password=\"admin\" roles=\"admin,admin-gui,manager,manager-gui\"/&gt;\n&lt;user username=\"manager\" password=\"manager\" roles=\"manager-script\"/&gt;\n</code></pre> <p>Una vez configurado el archivo setting.xml de tomcat debemos configurar el archivo <code>/etc/maven/settings.xml</code> donde a\u00f1adiremos las siguiente l\u00edneas </p> <p></p>"},{"location":"Tema%203/tarea3.1/#6-despliegue","title":"6. despliegue","text":"<p>Para desplegar el proyecto que tenemos configurado deberemos crear una carpeta vacia y situarnos en ella. Una vez en ella ejecutaremos el comando: </p> <pre><code>mvn archetype:generate -DgroupId=a23lupal -DartifactId=rock-paper -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false\n</code></pre> <p>Tras generar esta aplicaci\u00f3n, los comandos finales que se utilizan en Maven para desplegar, volver a desplegar o desplegar una aplicaci\u00f3n, son:</p> <ul> <li>mvn tomcat:deploy</li> <li>mvn tomcat:redeploy</li> <li>mvn tomcat:undeploy</li> </ul>"},{"location":"Tema%203/tarea3.2.2/","title":"Practica 3.4: Despliegue de una aplicacion React en Netlify","text":""},{"location":"Tema%203/tarea3.2.2/#introduccion","title":"Introducci\u00f3n","text":"<p>En la practica anterior hemos desplegado, una aplicaci\u00f3n en local para el desarrollo de la misma, pero en esta simularemos una situaci\u00f3n m\u00e1s real en la que desplegamos una aplicaci\u00f3n para producci\u00f3n, esto se puede hacer de dos maneras, copiando los archivos que teniamos en el servidor local y pegandolos en el hosting, o por otra parte, podemos usar GitHub mediante que har\u00e1 esta trasmisi\u00f3n mediante ssh y una plataforma PaaS (Plataform as a Service) como Netlify para el despliegue a producci\u00f3n de una aplicaci\u00f3n.</p>"},{"location":"Tema%203/tarea3.2.2/#que-es-github","title":"\u00bfQ\u00fae es GitHub?","text":"<p>GitHub es un servicio basado en la nube que aloja un sistema de control de versiones llamado Git. El cual permite subir cambios a los desarrolladores, a la vez que mantiene un seguimiento del progreso.</p> <p>El control de versiones permite seguir un rastreo de los cambios que se realizan y ante un error, permite revertirlos para que no lleguen a producci\u00f3n.</p>"},{"location":"Tema%203/tarea3.2.2/#que-es-netlify","title":"\u00bfQu\u00e9 es Netlify?","text":"<p>Netligy es un proveedor de alojamiento en la nube que proporciona el backend sin servidores para sitios est\u00e1ticos. Est\u00e1 dise\u00f1ado para buscar la productividad en el frontend, para producir y probar rapidamente sitios web.</p> <p>Funciona conect\u00e1ndose a un repositorio de GitHub, para descargar el c\u00f3gigo fuente para la configuraci\u00f3n del sitio, y poder prerenderizar los archivos del sitio.</p> <p>Ventajas de Netlify:</p> <ul> <li>Hace que el despliegue sea muy sencillo con GitHub, GitLab o Bitbucket.</li> <li>Incorpora un servicio DNS.</li> <li>Podemos desplegar una sola rama, o probar otras con un Pull Request para ver el efecto en el sitio.</li> <li>Permite la previsualizaci\u00f3n.</li> <li>Permite el envio de formulaios para recoger informaci\u00f3n de los usuarios.</li> </ul>"},{"location":"Tema%203/tarea3.2.2/#creacion-de-nuestra-aplicacion","title":"Creaci\u00f3n de nuestra aplicacion","text":"<p>Para crear nuestra aplicaci\u00f3n estableceremos una conexion 'ssh' con nuestra m\u00e1quina debian para crear un directorio en el que alojaremos la aplicaci\u00f3n.</p> <p></p> <p>Dentro de este directorio crearemos tres archivos dos <code>.html</code> y un <code>.js</code> los que conformar\u00e1n nuestra aplicaci\u00f3n de ejemplo.</p>"},{"location":"Tema%203/tarea3.2.2/#headhtml","title":"head.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n        &lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n        &lt;h1&gt;Esta es la pagina principal&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"/tailPage\"&gt;Ir a la siguiente pagina&lt;/a&gt;&lt;/p&gt;\n\n\n&lt;/body&gt;\n</code></pre>"},{"location":"Tema%203/tarea3.2.2/#tailhtml","title":"tail.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n        &lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n        &lt;h1&gt;FUNCIONA&lt;/h1&gt;\n\n&lt;/body&gt;\n</code></pre>"},{"location":"Tema%203/tarea3.2.2/#aplicacionjs","title":"aplicacion.js","text":"<pre><code>var http = require('http');\nvar fs = require('fs'); // para obtener los datos del archivo html\nvar port = process.env.PORT || 8080; \n\nhttp.createServer(function (req, res) {\n    res.writeHead(200, { 'Content-Type': 'text/html' });\n\n    // req.url almacena el path o ruta de la URL\n    var url = req.url;\n    if (url === \"/\") {\n// fs.readFile busca el archivo HTML\n// el primer par\u00e1metro es el path al archivo HTML\n// y el segundo es el callback de la funci\u00f3n\n// si el archivo no se encuentra, la funci\u00f3n devuelve un error\n// si el archivo se encuentra, el contenido del mismo se encuentra en pgres    \n        fs.readFile(\"head.html\", function (err, pgres) {\n            if (err)\n                res.write(\"HEAD.HTML NOT FOUND\");\n            else {\n                // Las siguientes 3 lineas\n                // tienen la funci\u00f3n de enviar el archivo html\n                // y finalizar el proceso de respuesta\n                res.writeHead(200, { 'Content-Type': 'text/html' });\n                res.write(pgres);\n                res.end();\n            }\n        });\n    }\n    else if (url === \"/tailPage\") {\n        fs.readFile(\"tail.html\", function (err, pgres) {\n            if (err)\n                res.write(\"TAIL.HTML NOT FOUND\");\n            else {\n                res.writeHead(200, { 'Content-Type': 'text/html' });\n                res.write(pgres);\n                res.end();\n            }\n        });\n    }\n\n}).listen(port, function () {\n    console.log(\"SERVER STARTED PORT: 8080\");\n});\n</code></pre> <p>Igual que antes para crear nuestro servidor Node.js hacemos <code>npm init</code> para crear el archivo <code>package.json</code>.</p> <p></p> <p>Podemos comprobar el correcto funcionamiento con <code>node aplicacion.js</code></p> <p></p> <p>De esta manera sabemos que nuestra aplicaci\u00f3n funciona perfectamente y la podemos desplegar en sitios como AWS, GCP, Azure, Digital Ocean, Heroku...</p> <p>DISCLAIMER\u00a1\u00a1\u00a1\u00a1 Para que nos funcione el Paas debemos hacer cambios dentro de el borrando todo lo que haya en el bloque de scripts y solamente dejar <code>\"start\":\"node aplicacion.js\"</code></p> <p></p>"},{"location":"Tema%203/tarea3.2.2/#proceso-de-despliegue-en-netlify","title":"Proceso de despliegue en Netlify","text":"<p>Para la aplicaci\u00f3n de Netlify clonaremos el siguiente repositorio <code>https://github.com/StackAbuse/color-shades-generato</code>, el despliegue se realizar\u00e1 de dos maneras:</p> <ul> <li> <p>Mediante el CLI de Netligy, es decir desde la terminal, desde un directorio local de nuestra m\u00e1quina.</p> </li> <li> <p>Mediante un c\u00f3digo publicado en un repositorio de GitHub.</p> </li> </ul>"},{"location":"Tema%203/tarea3.2.2/#despliegue-mediante-cli","title":"Despliegue mediante CLI","text":"<p>Primero deberemos de instalar el CLI de Netlify </p> <p></p> <p>Despues debemos autenticarnos que se har\u00e1 con el siguiente comando : <code>netlify login</code> En este punto tendremos que tener la aplicaci\u00f3n descargada, y estar logeados con Netlify, lo siguiente ser\u00e1 preparar la aplicaci\u00f3n para el despliegue.</p> <p>Comenzamos instalando el <code>package.json</code> en el directorio de la aplicacion con el comando <code>npm install</code>, posteriormente realizamos el build con <code>npm run build</code>:</p> <p></p> <p>Una vez lo hemos instalado introducimos el comando <code>netlify deploy</code> el cual nos har\u00e1 algunas preguntas las cuales dejaremos por defecto.</p> <p></p> <p>Y si todo ha ido correctamente nos saldr\u00e1 el siguiente mensaje <code>If everything looks good on your draft URL, deploy it to your main site URL with the --prod flag. netlify deploy --prod</code></p> <p></p>"},{"location":"Tema%203/tarea3.2.2/#despliegue-mediante-conexion-con-github","title":"Despliegue mediante conexi\u00f3n con GitHub","text":"<p>Primero borraremos el site que hemos subido antes para evitar problemas</p> <p></p> <p>Y tambi\u00e9n eliminaremos el directorio que hemos creado antes <code>rm -rf directorio_repositorio</code> </p> <p>Esta vez nos vamso a descargar la aplicaci\u00f3n con <code>wget</code> para que as\u00ed no tenga ninguna relaci\u00f3n con GitHub.</p> <p>Una vez nos hemos descargado el .zip creamos una carpera nueva y descomprimos el archivo.</p> <p></p> <p>Tras esto inicializamos un repositorio git en el directorio que hayamos creado con el .zip.</p> <p></p> <p>Y solo nos queda hacer un push al repositorio que hemos creado antes para subir el contenido del commit</p> <p></p> <p>Con esto ya hemos subido a GitHub nuestra aplicaci\u00f3n, el siguiente paso que nos queda es entrar en nuestro dashboard de Netlify para enlazar el repositorio de github con Netlify para poder hacer el despliegue.</p> <p>Comenzamos importando como un proyecto existente en github</p> <p></p> <p>Autorizamos a Netlify con Github </p> <p></p> <p>Y luego debemos seleccionar el proyecto que queramos subir, y si lo hemos hecho bien deberiamos acabar en la siguiente pesta\u00f1a </p> <p></p> <p>Por \u00faltimo terminamos la configuraci\u00f3n del despliegue </p> <p></p> <p>Y comenzar\u00e1 autom\u00e1ticamente el despliegue</p> <p></p> <p>De esta manera lo que hemos conseguido es que todos los <code>commit - push</code> que hagamos en gitHub resulte en un nuevo despliegue en netlify, que es lo conocido como despliegue continuo.</p> <p>Comprobemos esto:</p> <ul> <li>Para esto haremos un cambio en el archivo <code>robots.txt</code> a\u00f1adiendo en disallow /alberto_luque</li> </ul> <p></p> <ul> <li>Tras esto haremos un nuevo <code>commit</code> y <code>push</code>.</li> <li>Y comprobaremos que etos cambios se han visto en Netlify.</li> </ul>"},{"location":"Tema%203/tarea3.2/","title":"Practica 3.2: Despliegue de aplicaciones con Node Express","text":""},{"location":"Tema%203/tarea3.2/#introduccion","title":"Introducci\u00f3n","text":"<p>Vamos a realizar el despligue de una aplicaci\u00f3n Node.js, la diferencia que la aplicaci\u00f3n no se despliega sobre un servidor si no que la aplicaci\u00f3n es el servidor</p>"},{"location":"Tema%203/tarea3.2/#instalacion-de-nodejs-express-y-test-de-la-primera-aplicacion","title":"Instalaci\u00f3n de Node.js, Express y test de la primera aplicaci\u00f3n","text":"<p>Antes debemos comprobar que el servidor tomcat est\u00e1 apagado; primero comprobamos el estado con el comando <code>sudo systemctl status tomcat10</code> y si el estado es runnig lo paramos de la siguiente manera <code>sudo systemctl stop tomcat10</code>.</p> <p>Primero comprobamos que los paquetes est\u00e1n actualizados con <code>sudo apt update</code> y <code>sudo apt upgrade</code>. Seguidamente a\u00f1adimos la rama 16.x a la rama del repositorio de Node.js</p> <p></p> <p>Y despues simplemente instalamos Node.js con el siguiente comando</p> <p></p>"},{"location":"Tema%203/tarea3.2/#instalacion-de-expressjs","title":"Instalaci\u00f3n de ExpressJS","text":"<p>Ahora instalamos Express.js y para hacerlo de forma global introducimos el siguiente comando</p> <p></p> <p>Con esta serie de comandos crearemos un archivo e inicializaremos un proyecto Node.js con express.js</p> <p></p> <p>Creamos el fichero <code>app.js</code> e introducimos el siguiente c\u00f3digo de javaScript</p> <pre><code>const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) =&gt; {\n    res.send('Hello. Welcome to this blog')\n})\n\napp.listen(port, () =&gt; {\n    console.log(`Example app listening at http://localhost:${port}`)\n})\n</code></pre> <p>Y por \u00faltimo para comprobar la correcta instalaci\u00f3n iniciamos el servidor con <code>node app.js</code> y deberiamos ver algo as\u00ed:</p> <p></p> <p>Tambi\u00e9n tenemos que poder acceder a este servidor desde nuestra m\u00e1uqina local con <code>http://ip-maqina:3000</code></p>"},{"location":"Tema%203/tarea3.2/#despliegue-de-una-nueva-aplicacion","title":"Despliegue de una nueva aplicacion","text":"<p>Para practicar el despliegue de aplicaciones de terceros lo haremos de una aplicaci\u00f3n de un repositorio github.</p> <p>Primero clonamos dicho repositorio</p> <p><code>git clone https://github.com/MehedilslamRipon/Shopping-Cart-Application</code></p> <p></p> <p>Instalamos npm en este proyecto <code>npm install</code>, e iniciamos la aplicaion <code>npm run start</code>:</p> <p>Nos aparecer\u00e1 el siguiente error <code>sh: 1: nodemon: not found</code> y esto es porque no teneos instalado nodemon de forma local en el proyecto y con </p> <p></p> <p>Y con esto ya deberia funcionar nuestro proyecto</p> <p></p>"},{"location":"Tema%203/tarea3.2/#cuestiones","title":"Cuestiones","text":"<p>Cuando ejecut\u00e1is el comando npm run start, lo que est\u00e1is haciendo es ejecutar un script:</p> <ul> <li> <p>\u00bfDonde podemos ver que script se est\u00e1 ejecutando? El script que se ejecuta con npm run start est\u00e1 definido en el archivo package.json del proyecto, dentro de la secci\u00f3n \"scripts\"</p> </li> <li> <p>\u00bfQu\u00e9 comando est\u00e1 ejecutando?</p> </li> </ul> <p>El comando que se ejecuta es el valor que se encuentra en la secci\u00f3n \"start\" dentro del objeto \"scripts\" en package.json.</p>"},{"location":"Tema%203/tarea3.3/","title":"Tarea 3.5: Despliegue de una aplicaci\u00f3n Flask (Python)","text":""},{"location":"Tema%203/tarea3.3/#prerequisitos","title":"Prerequisitos","text":"<p>Servidor Debian con los siguientes paquetes instalados:</p> <ul> <li>Nginx</li> <li>Gunicorn</li> <li>Pipenv</li> </ul> <p>Estas instalacioes se podr\u00e1n hacer con <code>sudo apt install &lt;paquete&gt;</code></p>"},{"location":"Tema%203/tarea3.3/#introduccion","title":"Introducci\u00f3n","text":""},{"location":"Tema%203/tarea3.3/#que-es-un-framework","title":"\u00bfQu\u00e9 es un framework?","text":"<p>Un framework es un entorno de desarrollo que normalmente est\u00e1 especializado al lenguaje de programaci\u00f3n que se est\u00e1 usando, en el caso de Python el m\u00e1s conocido es Django pero en nuestro caso usaremos, Flask ya que su curva de aprendizaje no es tan grande y se pueden hacer grandes aplicaciones, por otra parte para PHP tenemos Symphony, y para Ruby est\u00e1 Ruby on Rails.</p>"},{"location":"Tema%203/tarea3.3/#flask","title":"Flask","text":"<p>Hoy en dia hay muchas opciones para hacer aplicaciones web(PHP, JAVA), y en este caso Flask nos permite esto con Python.</p> <p>Flask se dice que es un \"micro\" framework ya que en un principio solo se instalan las funcionalidades b\u00e1sicas para crear una p\u00e1gina web, pero que se pueden a\u00f1adir con plugins para Flask.</p> <p>Flask utiliza el patron MVC (modelo - vista - controlador) este patron diferencia la base de datos o datos (modelo), del html (vista) y JavaScript y peticiones a BBDD (controlador).</p>"},{"location":"Tema%203/tarea3.3/#gunicorn","title":"Gunicorn","text":"<p>Cuando se implenta una aplicaci\u00f3n web basada en Python, se tienen estas tres piezas:</p> <ul> <li>Servidor web(Nginx, Apache).</li> <li>Servidor de aplicaciones WSGI(Gunicorn, uWSGI, mod_wsgi, Waitress).</li> <li>Aplicaci\u00f3n Web(Django, Flask, Pyramid, FastAPI).</li> </ul> <p>Los servidores web procesan y distribuyen las peticiones de navegadores y clientes, WSGI(Web Server Gateway Interface), proporcionan un conjunto de reglas y para el comportamiento y comunicaci\u00f3n entre el servidor y las aplicaciones.</p> <p>Gunicorn(Green Unicorn) es un servidor WSGI, que se encuentra entre el servidor web y su aplicaci\u00f3n web. Este se encarga entre la comunicaci\u00f3n entre estos traduciendo ordenes y peticiones.</p>"},{"location":"Tema%203/tarea3.3/#gestor-de-paquetes-pip","title":"Gestor de paquetes <code>pip</code>","text":"<p><code>pip</code> es el comando para instalar paquetes de Python, automatizando la conexi\u00f3n al sitio https://pypi.org/, descarga y la compilaci\u00f3n del m\u00f3dulo.</p>"},{"location":"Tema%203/tarea3.3/#entornos-virtuales-en-python","title":"Entornos virtuales en Python","text":"<p>Un entorno virtual te permite tener m\u00faltiples instancias del interprete de Python, cada una configurada de diferente manera con distintos paquetes.</p> <p>De esta manera nos permite instalar paquetes de forma local en un entorno con <code>pip</code>.</p>"},{"location":"Tema%203/tarea3.3/#pipenv","title":"Pipenv","text":"<p>Este permite crear y mantener un entorno virtual para tus proyectos, agregando/borrando paquetes desde Pipfile; generando el archivo <code>Pipfile.lock</code>.</p>"},{"location":"Tema%203/tarea3.3/#procedimiento-completo-para-el-despliegue","title":"Procedimiento completo para el Despliegue","text":"<ol> <li>Instalamos el gestor de paquetes de Python</li> </ol> <ol> <li>Instalamos el paquete <code>pipenv</code> para gestionar los entornos virtuales:</li> </ol> <ol> <li>Y comprobamos que est\u00e1 isntalado correctamente mostrando su versi\u00f3n:</li> </ol> <p><code>pipenv --version</code></p> <ol> <li>Creamos el directorio en el que almacenaremos nuestro proyecto:</li> </ol> <p></p> <ol> <li>Al crearlo con <code>sudo</code>, los permisos pertenecen a root:</li> </ol> <p></p> <ol> <li>Hay que cambiarlo para que el due\u00f1o sea nuestro usuario (<code>nombre-debian</code>) y pertenezca al grupo <code>www-data</code>, el usuario usado por defecto por el servidor web para correr:</li> </ol> <p></p> <ol> <li>Estableceremos los permisos adecuados a este directorio, para que pueda ser le\u00eddo todo el mundo:</li> </ol> <p></p> <ol> <li>Dentro del directorio de nuestra aplicaci\u00f3n, creamos un archivo oculto <code>.env</code> que contendr\u00e1 la variables de entorno necesarias:</li> </ol> <p></p> <ol> <li>Editamos el archivo y a\u00f1adimos las variables, indicando cu\u00e1l es el archivo <code>.py</code> de la aplicaci\u00f3n y el entorno, que en nuestro caso ser\u00e1 producci\u00f3n:</li> </ol> <p></p> <ol> <li>Inicamos ahora nuestro entrono virtual. <code>Pipenv</code> cargar\u00e1 las variables de entorno desde el fichero <code>.env</code> de forma autom\u00e1tica:</li> </ol> <p></p> <ol> <li>Usamos <code>pipenv</code> para instalar las dependencias necesarias para nuestro proyecto:</li> </ol> <p></p> <ol> <li>Ahora para comprobar que nuestra aplicaci\u00f3n funciona adecuadamente, crearemos la aplicaci\u00f3n m\u00e1s secilla con Flask. El archivo con la aplicaci\u00f3n ser\u00e1 <code>application.py</code> y la que se encargar\u00e1 de iniciarla ser\u00e1 <code>wsgi.py</code>:</li> </ol> <p> </p> <ol> <li>Ahora comprobamos nuestra aplicaci\u00f3n a modo de comprobaci\u00f3n con el servidor Flask integrado.</li> </ol> <p></p> <ol> <li>Ahora podremos desde nuestra m\u00e1quina anfitriona, introducir <code>http://IP-maq-virtual:5000</code>:</li> </ol> <p></p>"},{"location":"Tema%203/tarea3.3/#comprobacion-de-gunicorn","title":"Comprobaci\u00f3n de Gunicorn","text":"<ol> <li>Comprobemos ahora que funciona Gunicorn funciona. Si ha funcionado con Flask con el siguiente comando podemos comprobar que funciona con Gunicorn.</li> </ol> <ol> <li>Debemos comprobar con el comando <code>which gunicorn</code> cual es el path desde el que se ejecuta gunicorn:</li> </ol> <ol> <li>Como ya tenemos Nginx lo iniciamos:</li> </ol> <ol> <li>Ya fuera de nuestro entorno virtual, crearemos un archivo para que systemd corra Gunicorn como un servicio del sistema m\u00e1s:</li> </ol> <ol> <li>Ahora habilitamos e iniciamos el servicio</li> </ol> <p><code>systemctl enable nombre_servicio</code> <code>systemctl start nombre_servicio</code></p> <ol> <li>Creamos un archivo con el nombre de nuestra aplicaci\u00f3n en el que se establecer\u00e1 la configuraci\u00f3n del sitio, por esto se encontrar\u00e1 en <code>/etc/nginx/sites-available/nombre_aplicacion</code>.</li> </ol> <p></p> <ol> <li>Ahora deberemos crear un enlace simb\u00f3lico a <code>sites-enabled</code>:</li> </ol> <p></p> <ol> <li>Comprobamos la configuraci\u00f3n de NGINX y comprobamos que el estado sea activo:</li> </ol> <p></p> <ol> <li> <p>Ahora accederemos a nuestra p\u00e1gina est\u00e1 siendo servida por Gunicorn y Nginx, por lo que necesitaremos editar el archivo <code>/etc/hosts</code> de nuestra m\u00e1quina para que asocie la IP de la m\u00e1quina a nuestro <code>server_name</code>:</p> </li> <li> <p>Por \u00faltimo deberemos comprobar que todo ha ido bien accediendo a nuestra p\u00e1gina con <code>http://nombre_aplicacion</code> o <code>http://www.nombre_aplicacion</code>:</p> </li> </ol>"},{"location":"Tema%203/tarea3.3/#ejercicios","title":"Ejercicios","text":""},{"location":"Tema%203/tarea3.3/#ejercicio-1","title":"Ejercicio 1","text":"<p>Repite todo el proceso con la aplicaci\u00f3n del siguiente repositorio: <code>https://github.com/raul-profesor/Practica-3.5</code></p> <p>Recuerda que deber\u00e1s clonar el repositorio en tu directorio <code>/var/www</code>:</p> <p>git clone <code>https://github.com/raul-profesor/Practica-3.5</code></p> <p>Y, tras activar el entorno virtual dentro del directorio del repositorio clonado, para instalar las dependencias del proyecto de la aplicaci\u00f3n deber\u00e1s hacer:</p> <p><code>pipenv install -r requirements.txt</code></p> <p>Y un \u00faltimo detalle, si mir\u00e1is el c\u00f3digo del proyecto, que es muy sencillo, ver\u00e9is que Gunicorn debe iniciarse ahora as\u00ed:</p> <p><code>gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app</code></p> <p>Y el resto ser\u00eda proceder tal y como hemos hecho en esta pr\u00e1ctica.</p> <ol> <li>Primero clonaremos el repositorio <code>https://github.com/raul-profesor/Practica-3.5</code> en la ruta <code>/var/www</code> con el siguiente comando:</li> </ol> <p></p> <ol> <li>Tras haber clonado el repositorio cambiaremos los permisos y grupos de estas carpetas para poder hacer modificaciones en las mismas.</li> </ol> <p></p> <ol> <li>Lo siguiente que deberemos hacer ser\u00e1 crear el archivo .env para poder ejecutar el entorno virtual de Python en el cual escribiremos lo siguiente:</li> </ol> <p><pre><code>FLASK_APP = wsgi.py\nFLASK_ENV = production\n</code></pre> Y luego hay que hacer <code>pipenv shell</code> para activar el entorno virtual.</p> <p></p> <ol> <li>A continuaci\u00f3n entraremos en \u00e9l con cd Practica-3.5 y ejecutamos el siguiente comando</li> </ol> <p><code>pipenv install -r requirements.txt</code></p> <ol> <li>Tras que la instalaci\u00f3n de dependencias del proyecto se descargue e instale correctamente deberemos proceder con la instalaci\u00f3n de gunicorn.</li> </ol> <p><code>pipenv install gunicorn</code></p> <ol> <li>Antes de comenzar con la configuraci\u00f3n de gunicorn vamos a comprobar que la p\u00e1gina web funciona para eso ejecutaremos el comando.</li> </ol> <p><code>flask run --host '0.0.0.0'</code></p> <p>Y como podemos ver la web se ejecuta correctamente.</p> <p></p> <p>Una vez que sabemos que la p\u00e1gina web se muestra correctamente probaremos con gunicorn para ver si tambi\u00e9n trabaja correctamente, ejecutando el comando, <code>gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app</code></p> <p></p> <p>Tras esto deberemos averiguar y tomar nota de cu\u00e1l es el path desde el cual se ejecuta gunicorn para configurar en unos pasos m\u00e1s adelante un servicio del sistema, con el comando <code>which gunicorn</code>.</p> <p></p>"},{"location":"Tema%204/tarea4.1/","title":"Servidor DNS","text":""},{"location":"Tema%204/tarea4.1/#que-es-un-servidor-dns","title":"Que es un servidor DNS","text":"<p>Un servidor DNS es un servidor que se encarga de traducir las peticiones en texto plano a una direcci\u00f3n ip.</p>"},{"location":"Tema%204/tarea4.1/#instalacion-de-servidor-dns","title":"Instalaci\u00f3n de servidor DNS","text":"<p>Bind es el est\u00e1ndar para servidores DNS. Es una herramienta de software libre que se puede usar en la mayoria de plataformas Unix y Linux conocido como named (name daemon). Bind9 es la versi\u00f3n recomendada y es la que usaremos. Lo instalaremos de la siguiente manera:</p> <p><code>sudo apt-get install bind9 bind9utils bind9-doc</code></p>"},{"location":"Tema%204/tarea4.1/#configuracion-del-servidor","title":"Configuraci\u00f3n del servidor","text":"<p>Puesto que solo usaremos <code>IPV4</code>, lo configuraremos en el directorio <code>/etc/default</code>; y para indicarle qeu s\u00f3lo use IPv4, modificamos la l\u00ednea <code>OPTIONS = \"-u bind -4\"</code>.</p> <p>El archivo de configuraci\u00f3n principal <code>named.conf</code> de Bind est\u00e1 en el directorio: <code>/etc/bind</code></p> <p>Veremos esto:</p> <p></p> <p>Este archivo sirve para agrupar los archivos de configuraci\u00f3n que usaremos. </p>"},{"location":"Tema%204/tarea4.1/#configuracion-namedconfoptions","title":"Configuraci\u00f3n named.conf.options","text":"<p>Es una buena pr\u00e1ctica realizar copias de seguridad a los archivos de configuraci\u00f3n cuando van a ser modificados.</p> <p></p> <p>Ahora editaremos el archivo <code>named.conf.options</code> que se encuentra en <code>`/etc/bind/</code> e incluiremos lo siguiente:</p> <ul> <li>Por motivos de seguiridad a\u00f1adiremos una lista de acceso para que s\u00f3lo puedan hacer consultas recursivas aquellos hosts que permitamos.     En nuestro caso, los confiables son los de la red 192.168.X.0/24 donde la 'X' depender\u00e1 de la red de casa. De esta forma tendremos que a\u00f1adir algo as\u00ed.</li> </ul> <p></p> <p>Esta inicialmente configurado para ser un servidor DNS cach\u00e9. Y se guardar\u00e1n las zonas en <code>/var/cache/bind</code></p> <ul> <li>Solo se permiten consultas recursivas a los hosts que hemos decidido en la lista de acceso.</li> <li>No permitir transferencias de zona a nadie.</li> <li>Configurar el servidor para que escuche las consultas DNS en el puerto 53. Se debe colocar la IP de la indterfaz de Debian.</li> <li>Permitir las consultas recursivas, ya que en el primer punto ya le hemos dichos que s\u00f3lo puedan hacerlas los hosts de la ACL.</li> <li>Debemos comentar la l\u00ednea en la que pone <code>listen-on-v6 {any};</code> puesto que no vamos a responder consultar IPv6.</li> </ul> <p>El archivo nos deberia de quedar as\u00ed:</p> <p></p> <p>Podemos comprobar si la configuracion es correcta con el comando <code>sudo named-checkconf</code>.</p> <p>Reiniciamos y comprobamos el servidor.</p> <p></p>"},{"location":"Tema%204/tarea4.1/#configuracion-namedconflocal","title":"Configuraci\u00f3n named.conf.local","text":"<p>En este archvivo configuraremos aspectos relativos a nuestras zonas. Vamos a declarar la zona \"deaw.es\". Por ahora indicaremos que el servidor DNS es maestro para esta zona.</p> <p></p>"},{"location":"Tema%204/tarea4.1/#creacion-del-archivo-de-zona","title":"Creaci\u00f3n del archivo de zona","text":"<p>El archivo de zona es la parte espec\u00edfica de un espacio de nombres DNS que se hospeda en un servidor DNS.  Vamos a crearlo justo en el directorio que hemos indicado antes y con el mismo nombre que hemos indicado antes.</p> <p></p> <p>El contenido del mimsmo ser\u00e1 el siguiente:</p> <p></p> <p>Se debe personalizar el contenido para que incluyan las IPs propias.</p> <p>Hay que tener en cuenta que los registros SOA son para detallar aspectos de la zona autoritativa, los NS para indicar los servidores DNS de la zona y los A las IPs respectivas.</p>"},{"location":"Tema%204/tarea4.1/#creacion-del-archivo-de-zona-para-la-resolucion-inversa","title":"Creaci\u00f3n del archivo de zona para la resoluci\u00f3n inversa","text":"<p>Deben de existir ambos archivos uno de archivo de zona directa y otro para la inversa. </p> <p>En primer lugar debemos a\u00f1adir las l\u00edneas correspondientes a esta zona inversa en el archivo <code>named.conf.local</code>, igual que con el archivo de zona directa:</p> <p></p> <p>En la x debe ir el tercer bite de vuestra red.</p> <p>Y la configuraci\u00f3n de la zona de resoluci\u00f3n inversa:</p> <p></p>"},{"location":"Tema%204/tarea4.1/#comprobacion-de-las-configuraciones","title":"Comprobaci\u00f3n de las configuraciones","text":"<ul> <li>Comprobaci\u00f3n de la configuraci\u00f3n de la zona directa:</li> </ul> <p><code>sudo named-checkzone db.deaw.es db.18.168.192</code></p> <ul> <li>Comprobaci\u00f3n de la configuraci\u00f3n de zona indirecta:</li> </ul> <p><code>sudo named-checkzone db.18.168.192 db.deaw.es</code></p> <p>Sabremos que est\u00e1 bien ya que nos devolver\u00e1 <code>OK</code></p> <p>Reiniciamos el servicio y comprbamos su estado:</p> <p><code>sudo systemctl restart named</code></p> <p></p>"},{"location":"Tema%204/tarea4.1/#comprobaciones-de-las-resoluciones-y-de-las-consultas","title":"Comprobaciones de las resoluciones y de las consultas","text":"<p>Vamos a comprobar desde los clientes con dig y nslooup:</p> <ul> <li><code>dig</code></li> </ul> <p></p> <ul> <li><code>nslooup</code></li> </ul> <p></p>"},{"location":"Tema%204/tarea4.1/#cuestiones-finales","title":"Cuestiones Finales","text":""},{"location":"Tema%204/tarea4.1/#cuestion-1","title":"Cuesti\u00f3n 1","text":"<ul> <li>\u00bfQu\u00e9 pasar\u00e1 si un cliente de una red diferente a la tuya intenta hacer uso de tu DNS de alguna manera, le funcionar\u00e1?\u00bfPor qu\u00e9, en qu\u00e9 parte de la configuraci\u00f3n puede verse?</li> </ul> <p>No funcionar\u00e1 porque el servidor est\u00e1 configurado para aceptar consultas solo de la red interna (192.168.X.0/24). Esto se controla mediante: La lista de acceso (allow-query). Las interfaces de escucha (listen-on). La deshabilitaci\u00f3n de IPv6 (listen-on-v6).</p>"},{"location":"Tema%204/tarea4.1/#cuestion-2","title":"Cuesti\u00f3n 2","text":"<ul> <li>\u00bfPor qu\u00e9 tenemos que permitir las consultas recursivas en la configuraci\u00f3n?</li> </ul> <p>Permitir consultas recursivas a clientes internos ya que simplifica la resoluci\u00f3n de nombres y mejora el rendimiento de la red. Esto no es buena idea hacerlo de forma global ya que presenta devilidades de seguridad.</p>"},{"location":"Tema%204/tarea4.1/#cuestion-3","title":"Cuesti\u00f3n 3","text":"<ul> <li>El servidor DNS que acab\u00e1is de montar, \u00bfes autoritativo?\u00bfPor qu\u00e9?</li> </ul> <p>S\u00ed, el servidor DNS es autoritativo para las zonasconfiguradas expl\u00edcitamente (deaw.es y X.168.192.in-addr.arpa) porque contiene los archivos de zona y responde como la fuente oficial para esos dominios. Tambi\u00e9n puede ser recursivo para los clientes internos confiables, resolviendo nombres de dominio fuera de sus zonas autoritativas, seg\u00fan tu configuraci\u00f3n.</p>"},{"location":"Tema%204/tarea4.1/#cuestion-4","title":"Cuesti\u00f3n 4","text":"<ul> <li>\u00bfD\u00f3nde podemos encontrar la directiva $ORIGIN y para qu\u00e9 sirve?</li> </ul> <p>La directiva $ORIGIN se encuentra en los archivos de zona. Sirve para definir o cambiar el dominio base al interpretar nombres relativos en los registros DNS.</p>"},{"location":"Tema%204/tarea4.1/#cuestion-5","title":"Cuesti\u00f3n 5","text":"<ul> <li>\u00bfUna zona es id\u00e9ntico a un dominio?</li> </ul> <p>No una zona no es lo mismo que un dominio. Ya que una zona solo abarca una parte de un dominio.</p>"},{"location":"Tema%204/tarea4.1/#cuestion-6","title":"Cuesti\u00f3n 6","text":"<ul> <li>\u00bfPueden editarse los archivos de zona de un servidor esclavo/secundario?</li> </ul> <p>No se pueden editar ya que los esclavos simplente reciben y almacenan los datos eniados de los maestros.</p>"},{"location":"Tema%204/tarea4.1/#cuestion-7","title":"Cuesti\u00f3n 7","text":"<ul> <li>\u00bfPor qu\u00e9 podr\u00eda querer tener m\u00e1s de un servidor esclavo para una misma zona?</li> </ul> <p>Porque ayuda a mejorar la redundancia, redundancia, balanceo de carga y el rendimiento de la resoluci\u00f3n de nombres.</p>"},{"location":"Tema%204/tarea4.1/#cuestion-8","title":"Cuesti\u00f3n 8","text":"<ul> <li>\u00bfCu\u00e1ntos servidores ra\u00edz existen?</li> </ul> <p>Hay 13 servidores ra\u00edz en todo el mundo, pero que est\u00e1n replicados cientos de veces para mejorar la rapidez y redundancia en el funcionamiento.</p>"},{"location":"Tema%204/tarea4.1/#cuestion-9","title":"Cuesti\u00f3n 9","text":"<ul> <li>\u00bfQu\u00e9 es una consulta iterativa de referencia?</li> </ul> <p>Es una consulta en la que el servidor DNS responde con la direcci\u00f3n IP de otro servidor DNS que puede tener la respuesta a la consulta del cliente.</p>"},{"location":"Tema%204/tarea4.1/#cuestion-10","title":"Cuesti\u00f3n 10","text":"<ul> <li>En una resoluci\u00f3n inversa, \u00bfa qu\u00e9 nombre se mapear\u00eda la direcci\u00f3n IP 172.16.34.56?</li> </ul> <p>Se mapearia para 56.24.16.172.in-addr.arpa</p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/","title":"Ejercicios Git y GitHub","text":""},{"location":"Tema%205/Tarea5.1_Git_GitHub/#repositorio-deaw","title":"Repositorio DEAW","text":"<ul> <li> <ol> <li>Crearemos un repositorio en GitHub llamado DEAW.</li> </ol> </li> </ul> <ul> <li> <ol> <li>Clonaremos dicho repositorio en local.</li> </ol> </li> </ul>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#commit-inicial","title":"Commit inicial","text":"<ul> <li> <ol> <li>Realizar un commit inicial con el comentario <code>Comenzamos con los ejercicios de Git</code></li> </ol> </li> </ul>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#push-inicial","title":"Push inicial","text":"<ol> <li>SUbir los cambios al repositorio remoto.</li> </ol>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ignorar-archivos","title":"Ignorar archivos","text":"<ul> <li> <ol> <li>Crear en el repositorio local un fichero llamado privado.txt.</li> </ol> </li> <li> <ol> <li>Crear en el repositorio local una carpeta llamada privada.</li> </ol> </li> <li> <ol> <li>Realizar los cambios oportunos para que tanto el archivo como la carpeta sean ingorados por git.</li> </ol> </li> </ul>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#anadir-fichero-1txt","title":"A\u00f1adir fichero 1.txt","text":"<ul> <li> <ol> <li>A\u00f1adir fichero 1.txt al repositorio local.</li> </ol> </li> </ul>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#crear-el-tag-v01","title":"Crear el tag v0.1","text":"<pre><code>git tag V0.1\n</code></pre>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#subir-el-tag-v01","title":"Subir el tag v0.1","text":"<pre><code>git push --tags\n</code></pre>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#cuenta-de-github","title":"Cuenta de github","text":"<ol> <li>Poner una foto de vuestro perfil de GitHub.<ul> <li>Para cambiar la foto de perfil deberemos ir a configuraci\u00f3n de github y hacer click en cambiar foto</li> </ul> </li> </ol> <p>Y as\u00ed queda la foto cambiada:</p> <p></p> <ol> <li> <p>Poner el doble factor de autentificaci\u00f3n en vuestra cuenta de Github</p> <ul> <li>Para a\u00f1adir el doble factor de autentificaci\u00f3n deberemos irnos al apartado de contrase\u00f1as y autenticaci\u00f3n, en donde a\u00f1adiremos los m\u00e9todos de autenticaci\u00f3n de doble factor que queramos.</li> </ul> </li> </ol> <p>\"</p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#uso-social-de-github","title":"Uso social de github","text":"<ol> <li> <p>Preguntar los nombres de usuario de GitHub de 2 de tus compa\u00f1eros de clase, b\u00fascalos, y s\u00edguelos.</p> </li> <li> <p>Buscamos los usuarios y le damos a seguir:</p> </li> </ol> <p></p> <ol> <li> <p>Seguir los repositorios DEAW del resto de tus compa\u00f1eros.</p> </li> <li> <p>Dentro del repositorio, le daremos a watch all activity y ya estaremos siguiendo el repositorio</p> </li> </ol> <p></p> <ol> <li> <p>A\u00f1adir una estrella a los repositorios DEAW del resto de tus compa\u00f1eros.</p> </li> <li> <p>Para dar una estrella haremos clic en star y as\u00ed habremos dado una estrella</p> </li> </ol> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#crear-una-tabla","title":"Crear una tabla","text":"<ol> <li>Crear una tabla en markdown con la informaci\u00f3n de varios de tus compa\u00f1eros de clase.</li> </ol>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#colaboradores","title":"Colaboradores","text":"<ol> <li> <p>Poner a un compa\u00f1ero como colaborador en el repositorio DEAW</p> </li> <li> <p>Para a\u00f1adir un colaborador deberemos ir a settings dentro del repositorio. Una vez dentro iremos a colaboradores y haremos clic en a\u00f1adir personas</p> </li> </ol> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#crear-una-rama-v02","title":"Crear una rama v0.2","text":"<ol> <li> <p>Crear una rama <code>v0.2</code>.</p> </li> <li> <p>Para crear una rama nueva lo haremos con la siguiente rama</p> </li> </ol> <pre><code>git branch v0.2\n</code></pre> <p>Posiciona tu carpeta de trabajo en esta rama, antes de esto hay que hacer commit de cualquier cambio.</p> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#anadir-fichero-2txt","title":"A\u00f1adir fichero 2.txt","text":"<ol> <li>A\u00f1adir fichero 2.txt en la rama <code>v0.2</code>.</li> </ol>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#cramos-la-rama-remota-v02","title":"Cramos la rama remota v0.2","text":"<ol> <li> <p>Subir los cambios al repositorio remoto</p> </li> <li> <p>Para subir la rama v0.2 usaremos el siguiente comando.</p> </li> </ol> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#merge-directo","title":"Merge directo","text":"<ol> <li> <p>Posicionarse en la rama main</p> </li> <li> <p>Hacer un merge de la rama v0.2 en la rama master</p> </li> </ol> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#merge-con-conflicto","title":"Merge con conflicto","text":"<ol> <li>En la rama <code>master</code> poner Hola en el fichero <code>1.txt</code> y hacer commit</li> </ol> <ol> <li>Posicionarse en la rama v0.2 y poner Adios en el fichero \"1.txt\" y hacer commit.</li> </ol> <ol> <li> <p>Posicionarse de nuevo en la rama master y hacer un merge con la rama v0.2</p> </li> <li> <p>Una vez que hemos hecho los cambios en cada rama hacemos un merge y nos indicara que hay un conflicto.</p> </li> </ol> <p></p> <ul> <li>Para resolverlo nos iremos al archivo y nos quedaremos con los cambios de la rama que queramos</li> </ul> <p></p> <ul> <li>Una vez que hemos dejado el archivo con los cambios correctos y realizamos un commit</li> </ul> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#listado-de-ramas","title":"Listado de ramas","text":"<ol> <li> <p>Listar las ramas con merge y las ramas sin merge</p> </li> <li> <p>Para listar las ramas con merge usaremos el siguiente comando</p> </li> </ol> <pre><code>git branch --merged\n</code></pre> <ul> <li>Para listar las ramas sin merge usaremos el siguiente comando</li> </ul> <pre><code>git branch --no-merged\n</code></pre>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#arreglar-conflicto","title":"Arreglar conflicto","text":"<ul> <li>El conflicto fue arreglado en el paso anterior</li> </ul>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#borrar-rama","title":"Borrar rama","text":"<ol> <li>Crear un tag v0.2</li> <li>Borrar la rama v0.2</li> </ol>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#listado-de-cambios","title":"Listado de cambios","text":"<ol> <li>Listar los distintos commits con sus ramas y sus tags.</li> <li>Para listar los cambios usaremos el comando:</li> </ol> <pre><code>git log --oneline --decorate --graph --all\n</code></pre>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicios-git-y-github-ii","title":"Ejercicios Git y Github II","text":""},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicios-de-creacion-y-actualizacion-de-repositorios","title":"Ejercicios de creaci\u00f3n y actualizaci\u00f3n de repositorios","text":""},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-1","title":"Ejercicio 1","text":"<ol> <li> <p>Configurar Git definiendo el nombre del usuario, el correo electr\u00f3nico y activar el coloreado de salida.</p> </li> <li> <p>Para configurar el nombre de usuario usaremos el comando:</p> </li> </ol> <p><code>git config user.name nombre_usuario</code></p> <ul> <li>Para configurar el email de usuario usaremos el comando:</li> </ul> <p><code>git config user.email email_usuario</code></p> <ul> <li>Y por \u00faltimo configuraremos el coloreado de salida.</li> </ul> <p><code>git config color.ui auto</code></p> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-2","title":"Ejercicio 2","text":"<ol> <li>Crear un repositorio nuevo con el nombre libro y mostrar su contenido</li> <li> <p>Usaremos los siguientes comandos para crear el repositorio libro: <pre><code>mkdir libro\ncd libro\ngit init\n</code></pre></p> </li> <li> <p>Para mostrar el contenido usaremos el comando:</p> </li> </ol> <pre><code>ls -l\n</code></pre> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-3","title":"Ejercicio 3","text":"<ol> <li>Comprobar el estado del repositorio.</li> <li>Como hemos podido ver en la anterior captura el repositorio est\u00e1 vac\u00edo</li> <li>Crear un fichero indice.txt con el siguiente contenido: <pre><code>touch indice.txt\n</code></pre></li> <li>Comprobar de nuevo el estado del repositorio.</li> </ol> <ol> <li>A\u00f1adir el fichero a la zona de intercambio temporal.</li> </ol> <pre><code>git add indice.txt\n</code></pre> <ol> <li>Volver a comprobar el estado del repositorio.</li> </ol>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-4","title":"Ejercicio 4","text":"<ol> <li>Realizar un commit de los \u00faltimos cambios con el mensaje \u201cA\u00f1adido \u00edndice del libro.\u201d y ver el estado del repositorio.</li> </ol> <pre><code>git commit -m \"A\u00f1adido \u00edndice del libro.\"\n</code></pre>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-5","title":"Ejercicio 5","text":"<ol> <li> <p>Cambiar el fichero indice.txt para que contenga lo siguiente:</p> </li> <li> <p>Mostrar los cambios con respecto a la \u00faltima versi\u00f3n guardada en el repositorio.</p> </li> </ol> <p></p> <ol> <li>Hacer un commit de los cambios con el mensaje \"A\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas\"</li> </ol> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-6","title":"Ejercicio 6","text":"<ol> <li>Mostrar los cambios de la \u00faltima versi\u00f3n del repositorio con respecto a la anterior.</li> </ol> <p><code>git diff HEAD~1 HEAD</code></p> <p></p> <ol> <li>Cambiar el mensaje del \u00faltimo commit por \"A\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas al \u00edndice\"</li> </ol> <p><code>git commit --amend -m \"A\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas al \u00edndice.\"</code></p> <ol> <li> <p>Volver a mostrar los \u00faltimos cambios del repositorio.</p> </li> <li> <p>Esto lo haremos con el mismo comando que en el primer apartado</p> </li> </ol> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicios-de-manejo-del-historial-de-cambios","title":"Ejercicios de manejo del historial de cambios","text":""},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-1_1","title":"Ejercicio 1","text":"<ol> <li> <p>Mostrar el historial de cambios del repositorio.</p> </li> <li> <p>Para mostrar el historial de cambios del repositorio lo haremos con el siguiente comando</p> </li> </ol> <p><code>git log</code></p> <p></p> <ol> <li>Crear la carpeta cap\u00edtulos y crear dentro de ella el fichero capitulo1.txt con el siguiente texto.</li> </ol> <p>El flujo de trabajo b\u00e1sico con Git consiste en: 1- Hacer cambios en el repositorio. 2- A\u00f1adir los cambios a la zona de intercambio temporal. 3- Hacer un commit de los cambios.</p> <ol> <li>A\u00f1adir los cambios a la zona de intercambio temporal.</li> </ol> <p><code>git add capitulo1.txt</code></p> <ol> <li>Hacer un commit de los cambios con el mensaje \"A\u00f1adido cap\u00edtulo 1.\" Volver a mostrar de cambios del repositorio.</li> </ol> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-2_1","title":"Ejercicio 2","text":"<ol> <li>Crear el fichero capitulo2.txt en la carpeta cap\u00edtulos con el siguiente texto.</li> </ol> <p>El flujo de trabajo b\u00e1sico con Git consiste en: 1- Hacer cambios en el repositorio. 2- A\u00f1adir los cambios a la zona de intercambio temporal. 3- Hacer un commit de los cambios.</p> <ol> <li>A\u00f1adir los cambios a la zona de intercambio temporal.</li> </ol> <p><code>git add capitulo2.txt</code></p> <ol> <li> <p>Hacer un commit de los cambios con el mensaje \"A\u00f1adido cap\u00edtulo 2.\".</p> </li> <li> <p>Mostrar las diferencias entre la \u00faltima versi\u00f3n y dos versiones anteriores.</p> </li> <li> <p>Para mostrar las diferencias entre la \u00faltima versi\u00f3n y dos versiones anteriores lo haremos con el siguiente comando:</p> </li> </ol> <p><code>git diff HEAD~2 HEAD</code></p> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-3_1","title":"Ejercicio 3","text":"<ol> <li>Crear el fichero capitulo3.txt en la carpeta cap\u00edtulos con el siguiente texto.</li> </ol> <p>Git permite la creaci\u00f3n de ramas lo que permite tener distintas versiones del mismo proyecto y trabajar de manera simultanea en ellas.</p> <ol> <li>A\u00f1adir los cambios a la zona de intercambio temporal.</li> </ol> <p><code>git add capitulo3.txt</code></p> <ol> <li> <p>Hacer un commit de los cambios con el mensaje \"A\u00f1adido cap\u00edtulo 3.\".</p> </li> <li> <p>Mostrar las diferencias entre la primera y la \u00faltima versi\u00f3n del repositorio.</p> </li> <li> <p>Para hacer esto necesitamos primero tenemos que saber el ID del primer commit:</p> </li> </ol> <p><code>git log</code></p> <ul> <li> <p>Y el ID que vemos a la izquierda es el ID de cada commit en este caso el n\u00famero 1 es 4233f4b.</p> </li> <li> <p>Ahora hacemos la diferencia con este comando:</p> </li> </ul> <p><code>git diff 4233f4b HEAD</code></p> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-4_1","title":"Ejercicio 4","text":"<ol> <li>A\u00f1adir al final del fichero indice.txt la siguiente l\u00ednea:</li> </ol> <p>Cap\u00edtulo 5: Conceptos avanzados</p> <ol> <li>A\u00f1adir los cambios a la zona de intercambio temporal.</li> </ol> <p><code>git add indice.txt</code></p> <ol> <li> <p>Hacer un commit de los cambios con el mensaje \"A\u00f1adido cap\u00edtulo 5 al \u00edndice.\"</p> </li> <li> <p>Mostrar qui\u00e9n ha hecho cambios sobre el fichero indice.txt.</p> </li> <li> <p>Para mostrar qui\u00e9n ha hecho los cambios usaremos</p> </li> </ol> <p><code>git blame indice.txt</code></p> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicios-de-deshacer-cambios","title":"Ejercicios de deshacer cambios","text":""},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-1_2","title":"Ejercicio 1","text":"<ol> <li>Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo.</li> <li>Comprobar el estado del repositorio</li> </ol> <ol> <li> <p>Deshacer los cambios realizados en el fichero indice.txt para volver a la versi\u00f3n anterior del fichero.</p> </li> <li> <p>Para deshacer los cambios usaremos el siguiente comando:</p> </li> </ol> <p><code>git restore indice.txt</code></p> <ol> <li>Volver a comprobar el estado del repositorio.</li> </ol> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-2_2","title":"Ejercicio 2","text":"<ol> <li>Eliminar la \u00faltima l\u00ednea del fichero <code>`indice.txt</code> y guradarlo.</li> <li>A\u00f1adir los cambios a la zona de intercambio temporal.</li> <li>Comprobar de nuevo el estado del repositorio.</li> </ol> <ol> <li>Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo.</li> <li>Para quitar los cambios de la zona de intercambio, pero mantenerlos en el directorio de trabajo usaremos el siguiente comando:</li> </ol> <p><code>git reset indice.txt</code></p> <ol> <li>Comprobar de nuevo el estado del repositorio.</li> </ol> <p></p> <ol> <li>Deshacer los cambios realizados en el fichero indice.txt para volver a la versi\u00f3n anterior del fichero.</li> <li>Volver a comprobar el estado del repositorio.</li> </ol> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-3_2","title":"Ejercicio 3","text":"<ol> <li>Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo.</li> <li>Eliminar el fichero capitulos/capitulo3.txt.</li> <li>A\u00f1adir un fichero nuevo capitulos/capitulo4.txt vac\u00edo.</li> <li>A\u00f1adir los cambios a la zona de intercambio temporal.</li> <li>Comprobar de nuevo el estado del repositorio.    </li> <li> <p>Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo.</p> </li> <li> <p>Para hacer esto usaremos los siguientes comandos:</p> </li> </ol> <pre><code>git restore --staged indice.txt\ngit restore --staged capitulos/capitulo4.txt\ngit restore --staged capitulos/capitulo3.txt\n</code></pre> <ol> <li> <p>Comprobar de nuevo el estado del repositorio.</p> </li> <li> <p>Deshacer los cambios realizados para volver a la versi\u00f3n del repositorio.</p> </li> <li> <p>Aqu\u00ed usaremos el mismo comando que en el apartado 6 pero sin la opci\u00f3n --staged. Y para deshacer los cambios del capitulo4 usaremos este comando.</p> </li> </ol> <p><code>rm capitulos/capitulo4.txt</code></p> <ol> <li>Volver a comprobar el estado del repositorio.</li> </ol> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-4_2","title":"Ejercicio 4","text":"<ol> <li>Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo.</li> <li>Eliminar el fichero capitulos/capitulo3.txt.</li> <li>A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cBorrado accidental.\u201d</li> <li>Comprobar el historial del repositorio.</li> </ol> <ol> <li> <p>Deshacer el \u00faltimo commit pero mantener los cambios anteriores en el directorio de trabajo y la zona de intercambio temporal.</p> </li> <li> <p>Para mantener los cambios y borrar el commit, deberemos usar el siguiente comando:</p> </li> </ol> <p><code>git reset --soft HEAD~1</code></p> <ul> <li> <p>El par\u00e1metro soft nos permite mantener los cambios y solo deshace el commit.</p> </li> <li> <p>Comprobar el historial y el estado del repositorio.</p> </li> </ul> <p></p> <ol> <li> <p>Volver a hacer el commit con el mismo mensaje de antes. 8.Deshacer el \u00faltimo commit y los cambios anteriores del directorio de trabajo volviendo a la versi\u00f3n anterior del repositorio.</p> </li> <li> <p>Ahora usaremos el par\u00e1metro --harden vez de --soft para que el directorio vuelve a estar como el \u00faltimo commit antes de borrado accidental.</p> </li> </ol> <p><code>git reset --hard HEAD~1</code></p> <ol> <li>Comprobar el historial y el estado del repositorio.</li> </ol> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicios-de-repositorios-remotos","title":"Ejercicios de repositorios remotos","text":""},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-1_3","title":"Ejercicio 1","text":"<ol> <li>Crear un nuevo repositorio p\u00fablico en GitHub con el nombre libro-git.</li> <li>A\u00f1adirlo al repositorio local del libro.</li> <li>Mostrar todos los repositorios remotos configurados</li> </ol>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-2_3","title":"Ejercicio 2","text":"<ol> <li>A\u00f1adir los cambios del repositorio local al repositorio remoto de Github.</li> <li>Para submit los cambios a git deberemos usar el siguiente comando:</li> </ol> <p><code>git push -u origin master</code></p> <ol> <li> <p>Acceder a Github y comprobar que se han subido los cambios mostrando el historial de versiones.</p> </li> <li> <p>Y como podemos ver, se han subido los cambios</p> </li> </ol> <p></p>"},{"location":"Tema%205/Tarea5.1_Git_GitHub/#ejercicio-3_3","title":"Ejercicio 3","text":"<ol> <li> <p>Colaborar en el repositorio remoto libro-git de otro usuario.</p> </li> <li> <p>Clonar su repositorio libro-git.</p> </li> <li>Para clonar un repositorio usaremos git clone</li> <li> <p>A\u00f1adir el fichero autores.txt que contenga el nombre del usuario y su correo electr\u00f3nico.</p> </li> <li> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> </li> <li> <p>Hacer un commit con el mensaje \u201cA\u00f1adido autor.\u201d</p> </li> <li>Subir los cambios al repositorio remoto.</li> <li>Esta vez, como la rama en el remoto ya est\u00e1 creada obviaremos el par\u00e1metro -u en git push</li> </ol> <p><code>git push</code></p> <p></p>"},{"location":"tema%206/practica_6.1/","title":"Pr\u00e1ctica 6.1 - Dockerizaci\u00f3n del despliegue de una aplicaci\u00f3n Node.js","text":""},{"location":"tema%206/practica_6.1/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta practica vamos a dockerizar una aplicaci\u00f3n que hace petici\u00f3nes a una API para gestionar direcciones que guardar\u00e1 los datos en una BBDD PostgreSQL.</p>"},{"location":"tema%206/practica_6.1/#ventajas-de-dockerizar","title":"Ventajas de Dockerizar","text":"<ol> <li> <p>Configuraci\u00f3n r\u00e1pida del entrono local para el desarrollo.</p> </li> <li> <p>Evitar una inconsistencia en la configuraci\u00f3n de entronos.</p> </li> <li> <p>Despliegues r\u00e1pidos.</p> </li> <li> <p>Mejor control de versiones.</p> </li> <li> <p>Al tener control de versiones se puede hacer rollback al c\u00f3digo.</p> </li> <li> <p>Como se suele hacer, se establece un entrono local, de integraci\u00f3n, de puesta en escena y de producci\u00f3n.</p> </li> <li> <p>Hay un gran apoyo de la comunidad implementando con grandes imagenes que se pueden reutilizar.</p> </li> </ol>"},{"location":"tema%206/practica_6.1/#despliegue-con-docker","title":"Despliegue con Docker","text":""},{"location":"tema%206/practica_6.1/#clonar-el-repositorio-que-usaremos","title":"Clonar el repositorio que usaremos:","text":"<pre><code>$ git clone https://github.com/raul-profesor/DAW_practica_6.1_2024.git\n</code></pre> <p>Este es el contenido del archivo <code>Dockerfile</code>, para poder construir la imagen y correr el contenedor.</p> <pre><code>_____ node:18.16.0-alpine3.17 \n\n_____  mkdir -p /opt/app\n\n_____ /opt/app\n\n_____ src/package.json src/package-lock.json .\n\n_____ npm install\n\n_____ src/ .\n\n_____ 3000\n\n_____ [\"npm\", \"run\", \"start:dev\"]\n</code></pre> <p>Cada l\u00ednea es un comando que docker va a ejecutar para la construcci\u00f3n del contenedor.</p> <p>De esta manera para tener nuestra aplicaci\u00f3n corriendo simplemente ser\u00e1n un par de comandos.</p> <p>Hacemos un build de la imagen de Docker. Le indicamos que \u00e9sta se llama <code>librodirecciones</code> y que haga build con el contexto del directorio de trabajo, as\u00ed como del Dockerfile que hay en el:</p> <p><code>$ docker build -t librodirecciones .</code></p> <p>Y solo nos quedar\u00eda iniciar el contenerdor con la aplicaci\u00f3n. Necesatiaremos especificar las opciones <code>-p</code>, mediante le diremos que escuche peticiones de cualquier m\u00e1quina desde el peusto 3000 (<code>-p 3000:3000</code>), y tambi\u00e9n la opci\u00f3n <code>-d</code> que lo haremos correr en background. As\u00ed quedar\u00eda el comando:</p> <p><code>$ docker run -p 3000:3000 -d librodirecciones</code></p> <p></p> <p>Solamente nos quedar\u00eda comproba el contendedor con <code>http://IP_Maq_Virtual:3000</code>.</p> <p></p>"},{"location":"tema%206/practica_6.1/#docker-compose","title":"Docker Compose","text":"<p>Docker compose nos permite:</p> <ul> <li>Iniciar y detener m\u00faltiples contenedores en secuencia.</li> <li>Conectar contenedores utilizando una red virtual.</li> <li>Manejar la persistencia de datos usando Docker Volumes.</li> <li>Establecer variables de entorno.</li> <li>Construir o descargar im\u00e1genes de contenedores seg\u00fan sea necesario.</li> </ul> <p>Docker compose usa un archivo <code>yaml</code> para escribir la configuraci\u00f3n de la aplicaci\u00f3n.</p> <p>En este caso nosotros usaremos este archivo <code>yaml</code> para el correcto funcionamiento de nuestra aplicaci\u00f3n.</p> <pre><code>version: \"3.9\"\nservices:\n  postgres:\n    image: postgres:latest\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    ports: \n      - '5432:5432'\n    volumes:\n      - addressbook-db:/var/lib/postgresql/data\n\n  addressbook:\n    build:\n      context: .\n    environment:\n      DB_SCHEMA: postgres\n      DB_USER: postgres\n      DB_PASSWORD: postgres\n      DB_HOST: postgres\n    depends_on:\n      - postgres\n    ports:\n      - '3000:3000'\n\nvolumes:\n  addressbook-db:\n</code></pre> <p>Para iniciar los contenedores con Docker Compose, simplemente ejecutamos el siguiente comando:</p> <p><code>docker compose run addressbook npm run migrate</code></p> <p></p> <p>Ahora vamos a construir los contenedores a partir de las im\u00e1genes:</p> <p><code>docker compose up --build -d</code></p> <p></p> <p>Y como se puede observar el contenedor ya est\u00e1 funcionando y se puede acceder a \u00e9l.</p>"},{"location":"tema%206/practica_6.1/#tarea","title":"Tarea","text":"<p>Probad que la aplicaci\u00f3n junto con la BBDD funciona correctamente. El funcionamiento de la API es:</p> <ul> <li>GET /persons/all muestra todas las personas en el libro de direcciones</li> <li>GET /persons/1 muestra la persona con el id 1</li> <li>PUT /persons/ a\u00f1ade una persona al libro de direcciones</li> <li> <p>DELETE /persons/1 elimina a la persona con el id 1</p> </li> <li> <p>Funci\u00f3n put:    Como podemos ver, despu\u00e9s de hacer el put, la aplicaci\u00f3n nos devuelve los datos que hemos introducido en la base de datos junto al c\u00f3digo 200 indicando que se han insertado correctamente.</p> </li> </ul> <p></p> <ol> <li>Funci\u00f3n GET /persons/1    En este caso la aplicaci\u00f3n nos devuelve la informaci\u00f3n de la persona con ID 1</li> </ol> <p></p> <ol> <li>Funci\u00f3n GET /persons/all    Aqu\u00ed la aplicaci\u00f3n nos devuelve todas las personas que hay en la base de datos.</li> </ol> <p></p> <ol> <li>Y por \u00faltimo DELETE /persons/1     Esta petici\u00f3n como su nombre indica borrar a la persona con ID 1    Y si volvemos a intentar acceder a la persona 1 podemos ver que devuelve null, indicando que se ha borrado exitosamente. </li> </ol> <p></p>"},{"location":"tema%206/practica_6.2/","title":"Pr\u00e1ctica 6.2 - Despliegue de una aplicaci\u00f3n PHP con Nginx y MySQL usando Docker y docker-compose","text":""},{"location":"tema%206/practica_6.2/#introduccion","title":"Introducci\u00f3n","text":"<p>\u00bfQue es docker-compose?</p> <p>Docker Compose es una herramienta vers\u00e1til que te permite definir y gestionar aplicaciones multi-contenedor de forma sencilla. Con Docker Compose, puedes describir la configuraci\u00f3n de tu entorno de desarrollo en un archivo YAML, especificando los servicios, vol\u00famenes y redes necesarios para tu aplicaci\u00f3n.</p> <p>Para usarlo deberemos seguir los siguientes pasos:</p> <ul> <li> <p>Definir el entorno de nuestra aplicaci\u00f3n con un Dockerfile para que pueda usarse en cualquier lugar.</p> </li> <li> <p>Definir los servicios que componen la aplicacion en docker-compose.yml.</p> </li> <li> <p>Ejecutar docker compose up -d para que Docker lanza la aplicaci\u00f3n.</p> </li> </ul>"},{"location":"tema%206/practica_6.2/#instalacion-de-docker-compose","title":"Instalaci\u00f3n de docker-compose","text":""},{"location":"tema%206/practica_6.2/#proceso-de-dockerizacion-de-nginxphpmysl","title":"Proceso de dockerizaci\u00f3n de Nginx+PHP+Mysl","text":"<ol> <li>Estrucutra de directorios</li> </ol> <p>En esta practica vamos a seguir la siguiente estructura de directorios para que todas las rutas que usemos funcionen: <pre><code>/usuario/Documentos/practica6-2/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 nginx\n\u2502   \u251c\u2500\u2500 default.conf\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 php\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 www\n\u2514\u2500\u2500 html\n\u2514\u2500\u2500 index.php\n</code></pre> Por lo tanto vamos a ir creado estos directorios y archivos y posteriormente los iremos rellenando.</p> <p><pre><code>cd ~/Documentos\nmkdir practica6-2\ncd practica6-2\ntouch docker-compose.yml\nmkdir nginx\ntouch nginx/default.conf\ntouch nginx/Dockerfile\nmkdir php\ntouch php/Dockerfile\nmkdir www/html -p\ntouch www/html/index.php\n</code></pre> 2. Creaci\u00f3n de un contenedor Nginx</p> <p>Para empezar, necistamos crear y correr un contenedor Nginx para que nuestra aplicaci\u00f3n PHP se pueda mostrar en los navegadores.</p> <p>Dentro de la carpeta /usuario/home/practica6-2 debemos modificar el archiv docker-compose.yml</p> <p>Y editamos este archivo e introducimos las siguientes lineas:</p> <pre><code>services:\nnginx:\nimage: nginx:latest\ncontainer_name: nginx-container\nports:\n    - 80:80\n</code></pre> <p></p> <p>Una vez modificado este archivo, se encargar\u00e1 de descargarse \u00f1a \u00faltima versi\u00f3n de la imagen de Nginx, crear un contenedor y publicar en el puerto 80 del contenedor que tambi\u00e9n usara el 80 en la maquina anfitriona (80:80).</p> <p>Iniciamos esto con:</p> <p><code>docker compose up -d</code></p> <p></p> <p>Para comprobar que el contenedor est\u00e1 corriendo, deberemos ejecutar el siguiente comando:</p> <p><code>docker ps</code></p> <p>Adem\u00e1s, si intentamos conectarnos desde el navegador de nuestra maquina anfitriona y accedemos a la direcci\u00f3n ip de la m\u00e1quina donde esta alojado el contenedor deberia de salir p\u00e1gina de bienvenida de nginx.</p> <p></p> <ol> <li>Creaci\u00f3n del contendor PHP</li> </ol> <p>Como ya hemos creado previamente los archivos deberemos irnos a www/html/index.php</p> <p>Y dentro de index.php a\u00f1adiremos el siguiente c\u00f3digo: </p> <p>Tras esto procederemos a rellenar el archivo de configuraci\u00f3n de nginx ubicado en ./nginx/default.conf. Donde colocaremos la siguiente configuraci\u00f3n.</p> <pre><code>server {\n\n     listen 80 default_server;\n     root /var/www/html;\n     index index.html index.php;\n\n     charset utf-8;\n\n     location / {\n      try_files $uri $uri/ /index.php?$query_string;\n     }\n\n     location = /favicon.ico { access_log off; log_not_found off; }\n     location = /robots.txt { access_log off; log_not_found off; }\n\n     access_log off;\n     error_log /var/log/nginx/error.log error;\n\n     sendfile off;\n\n     client_max_body_size 100m;\n\n     location ~ .php$ {\n      fastcgi_split_path_info ^(.+.php)(/.+)$;\n      fastcgi_pass php:9000;\n      fastcgi_index index.php;\n      include fastcgi_params;\n      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n      fastcgi_intercept_errors off;\n      fastcgi_buffer_size 16k;\n      fastcgi_buffers 4 16k;\n    }\n\n     location ~ /.ht {\n      deny all;\n     }\n    }\n</code></pre> <p>Por \u00faltimo modificaremos el archivo Dockerfile dentro de la carpeta nginx para indicarle a docker que tiene que copiar esta configuraci\u00f3n dentro del contenedor.</p> <p>Contenido: <pre><code>FROM nginx:latest\nCOPY ./default.conf /etc/nginx/conf.d/default.conf\n</code></pre> </p> <p>Ahora editaremos nuestro archivo docker-compose.yml a\u00f1adiendo el nuevo servicio de php y modificando el de nginx. <pre><code>services:\nnginx:\nbuild: ./nginx/\ncontainer_name: nginx-container\nports:\n- 80:80\nlinks:\n- php\nvolumes:\n- ./www/html/:/var/www/html/\n\nphp:\nimage: php:7.0-fpm\ncontainer_name: php-container\nexpose:\n- 9000\nvolumes:\n- ./www/html/:/var/www/html/\n</code></pre></p> <p>Tras estos cambios, procederemos a lanzar los contenedores con:</p> <p><code>docker compose up -d</code></p> <p></p> <p>Y una vez que los contenedores esten levantados al hacer:</p> <p><code>docker ps</code></p> <p>Se dberia ver algo as\u00ed:</p> <p>Y si ahora volvemos a acceder a la ip del a m\u00e1quina virtual desde el navegador, veremos la p\u00e1gina que hemos creado en index.php</p> <p></p> <ol> <li>Creaci\u00f3n de un contenedor para datos</li> </ol> <p>Como habe\u00eds podido observar, hemos montado el directorio <code>www/html</code> en ambos contenedores, el de nginx y el de php. Sin embargo, esta no es una forma adecuada de hacerlo. En este paso crearemos un contenedor independiente el cual ser\u00e1 el encargado de contener los datos y lo enlzamos con el resto de contenedores.</p> <p>Para logra esto deberemos modificar el archivo <code>docker-compose.yml</code>:</p> <pre><code>services:\nnginx:\nbuild: ./nginx/\ncontainer_name: nginx-container\nports:\n- 80:80\nlinks:\n- php\nvolumes_from:\n- app-data\n\n    php:\n        image: php:7.0-fpm\n        container_name: php-container\n        expose:\n            - 9000\n        volumes_from:\n            - app-data\n\n    app-data:\n        image: php:7.0-fpm\n        container_name: app-data-container\n        volumes:\n            - ./www/html/:/var/www/html/\n        command: \"true\"\n\n#\nTras hacer este modificaci\u00f3n ejecutaremos el comando:\n\n#dockerfile\ndocker-compose up -d\n</code></pre> <p>Y volvemos a verificar que est\u00e1n corriendo todos los contenedores. <pre><code>docker ps -a\n</code></pre></p> <p></p> <p>Deberiamos ver algo parecido a esto:</p> <ol> <li>Creaci\u00f3n de un contendor Mysql</li> </ol> <p>En este apartado vamos a crear un contenedor con una base de datos Mysql y lo enlazaremos con el resto de contenedores.</p> <p>Primero deberemos modificar el dockerfile de la carpeta php para descargar e instalar una extensi\u00f3n para Mysql.</p> <p>Contenido del Dockerfile:</p> <pre><code>FROM php:7.0-fpm\nRUN docker-php-ext-install pdo_mysql\n</code></pre> <p>Y ahora deberemos modificar otra vez el archivo docker-compose.yml para a\u00f1adir el nuevo servicio de Mysql</p> <pre><code>services:\nnginx:\nbuild: ./nginx/\ncontainer_name: nginx-container\nports:\n- 80:80\nlinks:\n- php\nvolumes_from:\n- app-data\nphp:\nbuild: ./php/\ncontainer_name: php-container\nexpose:\n- 9000\nlinks:\n- mysql\nvolumes_from:\n- app-data\n\napp-data:\nimage: php:7.0-fpm\ncontainer_name: app-data-container\nvolumes:\n- ./www/html/:/var/www/html/\ncommand: \"true\"\n\nmysql:\nimage: mysql:5.7\ncontainer_name: mysql-container\nvolumes_from:\n- mysql-data\nenvironment:\nMYSQL_ROOT_PASSWORD: secret\nMYSQL_DATABASE: mydb\nMYSQL_USER: myuser\nMYSQL_PASSWORD: password\n\nmysql-data:\nimage: mysql:5.7\ncontainer_name: mysql-data-container\nvolumes:\n- /var/lib/mysql\ncommand: \"true\"\n</code></pre> <p>Tras realizar esta modificaci\u00f3n debemos modificar el archivo index.php y hacer los siguientes cambios: <pre><code>     &lt;!DOCTYPE html&gt;\n     &lt;head&gt;\n      &lt;title&gt;\u00a1Hola mundo!&lt;/title&gt;\n     &lt;/head&gt;\n\n     &lt;body&gt;\n      &lt;h1&gt;\u00a1Hola mundo!&lt;/h1&gt;\n      &lt;p&gt;&lt;?php echo 'Estamos corriendo PHP, version: ' . phpversion(); ?&gt;&lt;/p&gt;\n      &lt;?\n       $database =\"mydb\";\n       $user = \"myuser\";\n       $password = \"password\";\n       $host = \"mysql\";\n\n       $connection = new PDO(\"mysql:host={$host};dbname={$database};charset=utf8\", $user, $password);\n       $query = $connection-&gt;query(\"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_TYPE='BASE TABLE'\");\n       $tables = $query-&gt;fetchAll(PDO::FETCH_COLUMN);\n\n        if (empty($tables)) {\n          echo \"&lt;p&gt;No hay tablas en la base de datos \\\"{$database}\\\".&lt;/p&gt;\";\n        } else {\n          echo \"&lt;p&gt;La base de datos \\\"{$database}\\\" tiene las siguientes tablas:&lt;/p&gt;\";\n          echo \"&lt;ul&gt;\";\n            foreach ($tables as $table) {\n              echo \"&lt;li&gt;{$table}&lt;/li&gt;\";\n            }\n          echo \"&lt;/ul&gt;\";\n        }\n        ?&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>A continuaci\u00f3n volvemos a lanzar los contenedores y verificamos que est\u00e1n ejecutandose: <pre><code>docker compose up -d\ndocker ps -a\n</code></pre></p> <p></p> <ol> <li>Verificaci\u00f3n de conexi\u00f3n a la base de datos</li> </ol> <p></p> <p>Si ahora intentasemos acceder a la direcci\u00f3n de nuesta maquina, deberiamos de obtener la siguiente pantalla:</p> <p>Como se puede ver la aplicaci\u00f3n nos indicar que no hay tablas en la base de datos mydb esto se debe a que al copiar el archivo php no hemos configurado el nombre de usuario ni la contrase\u00f1a. Por lo tanto deberemos cambiar las siguientes l\u00edneas: <pre><code>$user = \"root\";\n$password = \"secret\";\n</code></pre></p> <p>Una vez modificado y guardado si referescamos la p\u00e1gina deberia de salirnos las tablas indicando que la aplicaci\u00f3n esta funcionando correctamente.</p> <p>Habiendo completado asi, el despliegue de nuestra aplicaci\u00f3n php, con mysql y nginx.</p>"},{"location":"tema%206/practica_6.3/","title":"Pr\u00e1ctica 6.3 - Despliegue de servidores web con usuarios autenticados mediante LDAP usando Docker y docker-compose","text":""},{"location":"tema%206/practica_6.3/#despliegue-con-docker-de-nginx-demonio-de-autenticacion-ldap-openladp","title":"Despliegue con Docker de Nginx + demonio de autenticaci\u00f3n LDAP + OpenLADP","text":"<p>Para esta pr\u00e1ctica crearemos un nuevo directorio en la carpeta Documentos la cual contendr\u00e1 un index.html <pre><code>mkdir practica6.3\n</code></pre> Tras esto procederemos a crear el archivo index.html con el siguiente contenido <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;h1&gt;\u00a1Hola Mundo!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n`````\n\nUna vez creado el archivo, procederemos a crear un nuevo directorio llamado conf en donde guardaremos la configuraci\u00f3n de Nginx.\n</code></pre> mkdir conf <pre><code>Una vez creado el directorio, crearemos el siguiente archivo ladp_nginx.conf e introduciremos la siguiente configuraci\u00f3n.\n````yaml\n\n\nserver {\n  listen 8080;\n\n  location = / {\n      auth_request /auth-proxy;\n  }\n\n  location = /auth-proxy {\n      internal;\n\n      proxy_pass http://nginx-ldap:8888;\n\n      # URL y puerto para conectarse al servidor LDAP\n      proxy_set_header X-Ldap-URL \"ldap://openldap:1389\";\n\n      # Base DN\n      proxy_set_header X-Ldap-BaseDN \"dc=example,dc=org\";\n\n      # Bind DN\n      proxy_set_header X-Ldap-BindDN \"cn=admin,dc=example,dc=org\";\n\n      # Bind password\n      proxy_set_header X-Ldap-BindPass \"adminpassword\";\n  }\n}\n</code></pre></p> <p>Basicamente en esta configuraci\u00f3n le decimos a Nginx lo siguiente:</p> <pre><code>Que escuche el puerto 8080 para las peticiones HTTP.\nQue cuando se acceda al sitio web, se solicite autorizaci\u00f3n en el directorio del sitio web.\nSe crea un nuevo location para ese directorio y que es donde se realizar\u00e1 la configuraci\u00f3n de c\u00f3mo conectarnos a nuestro openldap.\nSe indica la URL de nuestro openldap.\nEl DN, base sobre el que se realizar\u00e1n las b\u00fasquedas en openldap.\nEl usuario y contrase\u00f1a con el que nos conectaremos al openldap.\n</code></pre> <p>Una vez explicado esto, crearemos el archivo docker-compose.yml con la siguiente configuraci\u00f3n: <pre><code>services:\nnginx-ldap:\n\n\n    image: bitnami/nginx-ldap-auth-daemon\n\n\n    ports: \n\n\n      - 8888:8888\nnginx:\n\n\n    image: bitnami/nginx\n    ports: \n     - 8080:8080\n    volumes:\n\n\n     - ./app:/app\n     - ./conf/ldap_nginx.conf:/opt/bitnami/nginx/conf/server_blocks/ldap_nginx.conf\nopenldap:\n\n\nimage: bitnami/openldap\nports:\n- '1389:1389'    \nenvironment:\n\n\n    - LDAP_ADMIN_USERNAME=admin\n    - LDAP_ADMIN_PASSWORD=adminpassword\n    - LDAP_USERS=customuser\n    - LDAP_PASSWORDS=custompassword\n</code></pre></p> <p>Una vez creado, solo nos queda ejecutar el comando para arrancar los servicios: <pre><code>docker compose up -d\n</code></pre> Y como podemos ver docker ya empieza a descargar las imagenes</p> <p></p>"},{"location":"tema%206/practica_6.3/#despliegue-con-docker-de-php-apache-con-autenticacion-ldap","title":"Despliegue con Docker de PHP + Apache con autenticaci\u00f3n LDAP","text":"<ul> <li>Creamos un directorio que se llame Practica 6.3 - PHP <pre><code>mkdir 6.3\n</code></pre></li> <li>Ahora creamos, index.php dentro del directorio que hemos creado anteriormente. <pre><code>  &lt;?php\n  echo 'Well, hello LDAP authenticated user!';\n</code></pre></li> <li>Lo siguiente que deberemos hacer ser\u00e1 crear otro directorio llamado Docker y dentro \u00e9l, un archivo Dockerfile. <pre><code># ./Docker/Dockerfile --&gt; directorio donde se encuentra este archivo\n\n# Imagen base sobre la que vamos a trabajar\nFROM php:7-apache\n\n# Activamos el m\u00f3dulo LDAP de Apache ejecutando el siguiente comando\nRUN a2enmod authnz_ldap\n\n# A\u00f1adimos las reglas/configuraci\u00f3n de LDAP al directorio conf-enabled de Apache\n# (crearemos este archivo en el siguiente paso)\nCOPY Docker/ldap-demo.conf /etc/apache2/conf-enabled/\n\n# A\u00f1adimos ayuda de depuraci\u00f3n (debugging) en la configuraci\u00f3n de apache\n# En caso de necesitarlo, lo descomentamos para ejecutar el siguiente comando\n# RUN echo \"LogLevel debug\" &gt;&gt; /etc/apache2/apache2.conf\n\n# Establecemos el directorio de trabajo adecuado\nWORKDIR /var/www/html/demo\n\n# Configuramos Apache para usar la configuraci\u00f3n LDAP definida arriba, la copiamos de nuestro ordenador al contenedor\nCOPY Docker/.htaccess ./.htaccess\n\n# Copiamos los archivos del proyecto que necesitamos, al contenedor\nCOPY index.php ./index.php\n</code></pre></li> <li>Ahora creamos el archivo ./Docker/ladp-demo.conf, que es la configuraci\u00f3n LADP. Las directivas PassEnv al principio del archivo nos permiten omitir credenciales y pasarlas luego como variables de entorno al correr el contenedor. <pre><code># ./Docker/ldap-demo.conf\nPassEnv LDAP_BIND_ON\nPassEnv LDAP_PASSWORD\nPassEnv LDAP_URL\n&lt;AuthnProviderAlias ldap demo&gt;\nAuthLDAPBindDN ${LDAP_BIND_ON}\nAuthLDAPBindPassword ${LDAP_PASSWORD}\nAuthLDAPURL ${LDAP_URL}\n&lt;/AuthnProviderAlias&gt; \n</code></pre></li> <li>Creamos un nuevo archivo llamado .htacces: <pre><code># ./.htaccess\nAuthBasicProvider demo\nAuthType Basic\nAuthName \"Protected Area\"\nRequire valid-user\n</code></pre></li> <li>Por \u00faltimo ejecutaremos el siguiente comando para que docker cree la imagen. <pre><code>docker build \\\n-t docker-ldap \\\n-f ./Docker/Dockerfile \\\n.\n</code></pre></li> </ul> <p> - Una vez creada la imagen ejecutaremos el contenedor indicando las credenciales de nuestra cuenta LDAP mediante variables de entorno con la flag -e. Para este caso, vamos a probar un servidor LDAP externo. <pre><code>docker run \\\n-p 3000:80 \\\n--name ldap_demo \\\n-e LDAP_BIND_ON='cn=read-only-admin,dc=example,dc=com' \\\n-e LDAP_PASSWORD='password' \\\n-e LDAP_URL='LDAP://ldap.forumsys.com/dc=example,dc=com' \\\ndocker-ldap\n</code></pre> - No nos queda m\u00e1s que ir a http://IP-M\u00e1q-Debian:3000/demo. Si todo ha ido bien, nos solicitar\u00e1 nuestras credenciales para iniciar sesion.</p> <p></p>"}]}